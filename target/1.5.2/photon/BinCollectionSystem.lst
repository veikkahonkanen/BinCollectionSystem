
c:/iot1/BinCollectionSystem/target/1.5.2/photon/BinCollectionSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002584  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a25a0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20000000  080a25a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005a4  20000068  20000068  00030068  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a260c  080a260c  0002260c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a2634  080a2634  00022634  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b724e  00000000  00000000  00022638  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000fd7f  00000000  00000000  000d9886  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00010e31  00000000  00000000  000e9605  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001c50  00000000  00000000  000fa436  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002ff8  00000000  00000000  000fc086  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00025615  00000000  00000000  000ff07e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00023b75  00000000  00000000  00124693  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a8530  00000000  00000000  00148208  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b110  00000000  00000000  001f0738  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 f8cd 	bl	80a21cc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 f8d2 	bl	80a21e2 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a25a4 	.word	0x080a25a4
 80a004c:	20000068 	.word	0x20000068
 80a0050:	20000068 	.word	0x20000068
 80a0054:	2000060c 	.word	0x2000060c
 80a0058:	2000060c 	.word	0x2000060c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fcb7 	bl	80a09d0 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a2560 	.word	0x080a2560
 80a0084:	080a2594 	.word	0x080a2594

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b814 	b.w	80a00b4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f83d 	bl	80a010c <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 bc5d 	b.w	80a0954 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 bb01 	b.w	80a06a0 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 bb07 	b.w	80a06b0 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <setup>:
float threshold100 = 1.00;
//unsigned long publish_delay =       60000;
//unsigned long previousPublish =      0   ;

void setup()
{
 80a00b4:	b510      	push	{r4, lr}
    rangefinder.init();
 80a00b6:	4811      	ldr	r0, [pc, #68]	; (80a00fc <setup+0x48>)
 80a00b8:	f000 f8c2 	bl	80a0240 <_ZN7HC_SR044initEv>
    rangefinder2.init();
 80a00bc:	4810      	ldr	r0, [pc, #64]	; (80a0100 <setup+0x4c>)
 80a00be:	f000 f8bf 	bl	80a0240 <_ZN7HC_SR044initEv>
    Serial.begin(9600);
 80a00c2:	f001 f849 	bl	80a1158 <_Z16_fetch_usbserialv>
 80a00c6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00ca:	f001 f82b 	bl	80a1124 <_ZN9USBSerial5beginEl>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a00ce:	4c0d      	ldr	r4, [pc, #52]	; (80a0104 <setup+0x50>)
    
    while (!Serial.available()) {
 80a00d0:	f001 f842 	bl	80a1158 <_Z16_fetch_usbserialv>
 80a00d4:	6803      	ldr	r3, [r0, #0]
 80a00d6:	691b      	ldr	r3, [r3, #16]
 80a00d8:	4798      	blx	r3
 80a00da:	b970      	cbnz	r0, 80a00fa <setup+0x46>
        Serial.println("Press any key to start.");
 80a00dc:	f001 f83c 	bl	80a1158 <_Z16_fetch_usbserialv>
 80a00e0:	4909      	ldr	r1, [pc, #36]	; (80a0108 <setup+0x54>)
 80a00e2:	f000 fb76 	bl	80a07d2 <_ZN5Print7printlnEPKc>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a00e6:	f000 f955 	bl	80a0394 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a00ea:	6020      	str	r0, [r4, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a00ec:	f000 fab8 	bl	80a0660 <spark_process>
		Particle.process();
        delay (1000);
 80a00f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a00f4:	f000 fbcc 	bl	80a0890 <delay>
{
    rangefinder.init();
    rangefinder2.init();
    Serial.begin(9600);
    
    while (!Serial.available()) {
 80a00f8:	e7ea      	b.n	80a00d0 <setup+0x1c>
 80a00fa:	bd10      	pop	{r4, pc}
 80a00fc:	2000006c 	.word	0x2000006c
 80a0100:	2000007c 	.word	0x2000007c
 80a0104:	20000534 	.word	0x20000534
 80a0108:	080a22a0 	.word	0x080a22a0

080a010c <loop>:
        delay (1000);
    }
}

void loop()
{
 80a010c:	b530      	push	{r4, r5, lr}
    //if (previousPublish == 0) {
	//		previousPublish = millis();
	//	}
    //if (millis()  - previousPublish >= publish_delay) {
    //unsigned long start = micros();
    float cm = rangefinder.distCM();
 80a010e:	4836      	ldr	r0, [pc, #216]	; (80a01e8 <loop+0xdc>)
        delay (1000);
    }
}

void loop()
{
 80a0110:	b095      	sub	sp, #84	; 0x54
    //if (previousPublish == 0) {
	//		previousPublish = millis();
	//	}
    //if (millis()  - previousPublish >= publish_delay) {
    //unsigned long start = micros();
    float cm = rangefinder.distCM();
 80a0112:	f000 f8ef 	bl	80a02f4 <_ZN7HC_SR046distCMEv>
 80a0116:	4604      	mov	r4, r0
    //unsigned long calcTime = micros() - start;
    delay(1000);
 80a0118:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a011c:	f000 fbb8 	bl	80a0890 <delay>
    //unsigned long start2 = micros();
    float cm_2 = rangefinder2.distCM();
 80a0120:	4832      	ldr	r0, [pc, #200]	; (80a01ec <loop+0xe0>)
 80a0122:	f000 f8e7 	bl	80a02f4 <_ZN7HC_SR046distCMEv>
 80a0126:	4605      	mov	r5, r0
    */
    //TODO: remove excess code
    
    //Empty char array to convert float into string type
    char cm1[20];
    sprintf(cm1, "%f", cm); // (array, write into string parameter, float)
 80a0128:	4620      	mov	r0, r4
 80a012a:	f001 fd8f 	bl	80a1c4c <__aeabi_f2d>
 80a012e:	4602      	mov	r2, r0
 80a0130:	460b      	mov	r3, r1
 80a0132:	a805      	add	r0, sp, #20
 80a0134:	492e      	ldr	r1, [pc, #184]	; (80a01f0 <loop+0xe4>)
 80a0136:	f000 fac3 	bl	80a06c0 <sprintf>
    Serial.println("\n");
 80a013a:	f001 f80d 	bl	80a1158 <_Z16_fetch_usbserialv>
 80a013e:	492d      	ldr	r1, [pc, #180]	; (80a01f4 <loop+0xe8>)
 80a0140:	f000 fb47 	bl	80a07d2 <_ZN5Print7printlnEPKc>
    Serial.println(cm1);
 80a0144:	f001 f808 	bl	80a1158 <_Z16_fetch_usbserialv>
 80a0148:	a905      	add	r1, sp, #20
 80a014a:	f000 fb42 	bl	80a07d2 <_ZN5Print7printlnEPKc>
    
    char cm2[20];
    sprintf(cm2, "%f", cm_2);
 80a014e:	4628      	mov	r0, r5
 80a0150:	f001 fd7c 	bl	80a1c4c <__aeabi_f2d>
 80a0154:	4602      	mov	r2, r0
 80a0156:	460b      	mov	r3, r1
 80a0158:	a80a      	add	r0, sp, #40	; 0x28
 80a015a:	4925      	ldr	r1, [pc, #148]	; (80a01f0 <loop+0xe4>)
 80a015c:	f000 fab0 	bl	80a06c0 <sprintf>
    Serial.println("\n");
 80a0160:	f000 fffa 	bl	80a1158 <_Z16_fetch_usbserialv>
 80a0164:	4923      	ldr	r1, [pc, #140]	; (80a01f4 <loop+0xe8>)
 80a0166:	f000 fb34 	bl	80a07d2 <_ZN5Print7printlnEPKc>
    Serial.println(cm2);
 80a016a:	f000 fff5 	bl	80a1158 <_Z16_fetch_usbserialv>
 80a016e:	a90a      	add	r1, sp, #40	; 0x28
 80a0170:	f000 fb2f 	bl	80a07d2 <_ZN5Print7printlnEPKc>
    
    char cm3[20];
    sprintf(cm3, "%f", cm+cm_2);
 80a0174:	4629      	mov	r1, r5
 80a0176:	4620      	mov	r0, r4
 80a0178:	f001 fdc2 	bl	80a1d00 <__addsf3>
 80a017c:	f001 fd66 	bl	80a1c4c <__aeabi_f2d>
 80a0180:	4602      	mov	r2, r0
 80a0182:	460b      	mov	r3, r1
 80a0184:	a80f      	add	r0, sp, #60	; 0x3c
 80a0186:	491a      	ldr	r1, [pc, #104]	; (80a01f0 <loop+0xe4>)
 80a0188:	f000 fa9a 	bl	80a06c0 <sprintf>
    Serial.println("\n");
 80a018c:	f000 ffe4 	bl	80a1158 <_Z16_fetch_usbserialv>
 80a0190:	4918      	ldr	r1, [pc, #96]	; (80a01f4 <loop+0xe8>)
 80a0192:	f000 fb1e 	bl	80a07d2 <_ZN5Print7printlnEPKc>
    Serial.println(cm3);
 80a0196:	f000 ffdf 	bl	80a1158 <_Z16_fetch_usbserialv>
 80a019a:	a90f      	add	r1, sp, #60	; 0x3c
 80a019c:	f000 fb19 	bl	80a07d2 <_ZN5Print7printlnEPKc>
 80a01a0:	4b15      	ldr	r3, [pc, #84]	; (80a01f8 <loop+0xec>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a01a2:	4916      	ldr	r1, [pc, #88]	; (80a01fc <loop+0xf0>)
 80a01a4:	781b      	ldrb	r3, [r3, #0]
 80a01a6:	a803      	add	r0, sp, #12
 80a01a8:	f88d 3000 	strb.w	r3, [sp]
 80a01ac:	233c      	movs	r3, #60	; 0x3c
 80a01ae:	eb0d 0203 	add.w	r2, sp, r3
 80a01b2:	f000 fd7b 	bl	80a0cac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a01b6:	9c04      	ldr	r4, [sp, #16]
 80a01b8:	b17c      	cbz	r4, 80a01da <loop+0xce>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a01ba:	6863      	ldr	r3, [r4, #4]
 80a01bc:	3b01      	subs	r3, #1
 80a01be:	6063      	str	r3, [r4, #4]
 80a01c0:	b95b      	cbnz	r3, 80a01da <loop+0xce>
        {
          _M_dispose();
 80a01c2:	6823      	ldr	r3, [r4, #0]
 80a01c4:	4620      	mov	r0, r4
 80a01c6:	689b      	ldr	r3, [r3, #8]
 80a01c8:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a01ca:	68a3      	ldr	r3, [r4, #8]
 80a01cc:	3b01      	subs	r3, #1
 80a01ce:	60a3      	str	r3, [r4, #8]
 80a01d0:	b91b      	cbnz	r3, 80a01da <loop+0xce>
            _M_destroy();
 80a01d2:	6823      	ldr	r3, [r4, #0]
 80a01d4:	4620      	mov	r0, r4
 80a01d6:	68db      	ldr	r3, [r3, #12]
 80a01d8:	4798      	blx	r3
    ///char msg[256];
    //snprintf(msg, sizeof(msg), "{\"1\":\"%.1f\",\"2\":\"%.1f\",\"k\":\"%s\"}", cm1, cm2, myWriteAPIKey);
    //Particle.publish(eventName, msg, PRIVATE, NO_ACK);
    Particle.publish("AU665081_distance", cm3, PRIVATE);
    //previousPublish = millis();
    delay(60000);
 80a01da:	f64e 2060 	movw	r0, #60000	; 0xea60
 80a01de:	f000 fb57 	bl	80a0890 <delay>
    //}else{
    //    previousPublish = 0;
    //}
    //delay(1000);
}
 80a01e2:	b015      	add	sp, #84	; 0x54
 80a01e4:	bd30      	pop	{r4, r5, pc}
 80a01e6:	bf00      	nop
 80a01e8:	2000006c 	.word	0x2000006c
 80a01ec:	2000007c 	.word	0x2000007c
 80a01f0:	080a22b8 	.word	0x080a22b8
 80a01f4:	080a2376 	.word	0x080a2376
 80a01f8:	20000078 	.word	0x20000078
 80a01fc:	080a22bb 	.word	0x080a22bb

080a0200 <_GLOBAL__sub_I_rangefinder>:
 80a0200:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0202:	4b08      	ldr	r3, [pc, #32]	; (80a0224 <_GLOBAL__sub_I_rangefinder+0x24>)
 80a0204:	2401      	movs	r4, #1
 80a0206:	701c      	strb	r4, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0208:	f000 f88c 	bl	80a0324 <HAL_Pin_Map>
// trigger / echo pins
const int triggerPin = A0;
const int echoPin = D1;
const int triggerPin2 = D4;
const int echoPin2 = D3;
HC_SR04 rangefinder = HC_SR04(triggerPin, echoPin);
 80a020c:	4622      	mov	r2, r4
 80a020e:	210a      	movs	r1, #10
 80a0210:	4805      	ldr	r0, [pc, #20]	; (80a0228 <_GLOBAL__sub_I_rangefinder+0x28>)
 80a0212:	f000 f80d 	bl	80a0230 <_ZN7HC_SR04C1Eii>
    delay(60000);
    //}else{
    //    previousPublish = 0;
    //}
    //delay(1000);
}
 80a0216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
const int triggerPin = A0;
const int echoPin = D1;
const int triggerPin2 = D4;
const int echoPin2 = D3;
HC_SR04 rangefinder = HC_SR04(triggerPin, echoPin);
HC_SR04 rangefinder2 = HC_SR04(triggerPin2, echoPin2);
 80a021a:	2203      	movs	r2, #3
 80a021c:	2104      	movs	r1, #4
 80a021e:	4803      	ldr	r0, [pc, #12]	; (80a022c <_GLOBAL__sub_I_rangefinder+0x2c>)
 80a0220:	f000 b806 	b.w	80a0230 <_ZN7HC_SR04C1Eii>
 80a0224:	20000078 	.word	0x20000078
 80a0228:	2000006c 	.word	0x2000006c
 80a022c:	2000007c 	.word	0x2000007c

080a0230 <_ZN7HC_SR04C1Eii>:
//    Version: 1.0.1

#include "HC-SR04.h"
#include "Particle.h"

HC_SR04::HC_SR04(int trigPin, int echoPin)
 80a0230:	b510      	push	{r4, lr}
 80a0232:	4c02      	ldr	r4, [pc, #8]	; (80a023c <_ZN7HC_SR04C1Eii+0xc>)
{
    this->trigPin = trigPin;
 80a0234:	6041      	str	r1, [r0, #4]
//    Version: 1.0.1

#include "HC-SR04.h"
#include "Particle.h"

HC_SR04::HC_SR04(int trigPin, int echoPin)
 80a0236:	6004      	str	r4, [r0, #0]
{
    this->trigPin = trigPin;
    this->echoPin = echoPin;
 80a0238:	6082      	str	r2, [r0, #8]
}
 80a023a:	bd10      	pop	{r4, pc}
 80a023c:	bf800000 	.word	0xbf800000

080a0240 <_ZN7HC_SR044initEv>:

void HC_SR04::init()
{
 80a0240:	b510      	push	{r4, lr}
 80a0242:	4604      	mov	r4, r0
    pinMode(trigPin, OUTPUT);
 80a0244:	2101      	movs	r1, #1
 80a0246:	8880      	ldrh	r0, [r0, #4]
 80a0248:	f001 f9c6 	bl	80a15d8 <pinMode>
    pinMode(echoPin, INPUT);
 80a024c:	8920      	ldrh	r0, [r4, #8]
 80a024e:	2100      	movs	r1, #0
}
 80a0250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void HC_SR04::init()
{
    pinMode(trigPin, OUTPUT);
    pinMode(echoPin, INPUT);
 80a0254:	f001 b9c0 	b.w	80a15d8 <pinMode>

080a0258 <_ZN7HC_SR0422triggerAndMeasurePulseEv>:
    if (timeUntilLow == 0) return NO_SIGNAL;
    return (float)timeUntilLow * uSecondsToInch;
}

unsigned long HC_SR04::triggerAndMeasurePulse()
{
 80a0258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a025c:	4607      	mov	r7, r0

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
 80a025e:	f000 f8a1 	bl	80a03a4 <HAL_disable_irq>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a0262:	88bb      	ldrh	r3, [r7, #4]
 80a0264:	261c      	movs	r6, #28
 80a0266:	4d22      	ldr	r5, [pc, #136]	; (80a02f0 <_ZN7HC_SR0422triggerAndMeasurePulseEv+0x98>)
 80a0268:	4373      	muls	r3, r6
 80a026a:	682a      	ldr	r2, [r5, #0]
 80a026c:	4680      	mov	r8, r0
 80a026e:	18d1      	adds	r1, r2, r3
 80a0270:	58d3      	ldr	r3, [r2, r3]
 80a0272:	888a      	ldrh	r2, [r1, #4]
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a0274:	200a      	movs	r0, #10
 80a0276:	831a      	strh	r2, [r3, #24]
 80a0278:	f000 f87c 	bl	80a0374 <HAL_Delay_Microseconds>
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80a027c:	88bb      	ldrh	r3, [r7, #4]
 80a027e:	682a      	ldr	r2, [r5, #0]
 80a0280:	4373      	muls	r3, r6
 80a0282:	18d1      	adds	r1, r2, r3
 80a0284:	58d3      	ldr	r3, [r2, r3]
 80a0286:	888a      	ldrh	r2, [r1, #4]
 80a0288:	835a      	strh	r2, [r3, #26]
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a028a:	f000 f87b 	bl	80a0384 <HAL_Timer_Get_Micro_Seconds>
 80a028e:	4681      	mov	r9, r0
}

inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
 80a0290:	893b      	ldrh	r3, [r7, #8]
 80a0292:	682a      	ldr	r2, [r5, #0]
 80a0294:	4373      	muls	r3, r6
 80a0296:	18d1      	adds	r1, r2, r3
 80a0298:	58d3      	ldr	r3, [r2, r3]
        pinSetFast(trigPin);
        delayMicroseconds(10);
        pinResetFast(trigPin);

        start = micros();
        while (pinReadFast(echoPin) != HIGH) {
 80a029a:	888a      	ldrh	r2, [r1, #4]
 80a029c:	691b      	ldr	r3, [r3, #16]
 80a029e:	421a      	tst	r2, r3
 80a02a0:	d108      	bne.n	80a02b4 <_ZN7HC_SR0422triggerAndMeasurePulseEv+0x5c>
 80a02a2:	f000 f86f 	bl	80a0384 <HAL_Timer_Get_Micro_Seconds>
            duration = micros() - start;
 80a02a6:	ebc9 0400 	rsb	r4, r9, r0
            if (duration >= timeoutHigh) {
 80a02aa:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 80a02ae:	d3ef      	bcc.n	80a0290 <_ZN7HC_SR0422triggerAndMeasurePulseEv+0x38>
                // Didn't recieve a pulse
                return 0;
 80a02b0:	2400      	movs	r4, #0
 80a02b2:	e017      	b.n	80a02e4 <_ZN7HC_SR0422triggerAndMeasurePulseEv+0x8c>
 80a02b4:	f000 f866 	bl	80a0384 <HAL_Timer_Get_Micro_Seconds>
        }

        start = micros();
        while (pinReadFast(echoPin) != LOW) {
            duration = micros() - start;
            if (duration >= timeoutLow) {
 80a02b8:	f247 1647 	movw	r6, #28999	; 0x7147
 80a02bc:	4681      	mov	r9, r0
 80a02be:	f04f 0a1c 	mov.w	sl, #28
 80a02c2:	893b      	ldrh	r3, [r7, #8]
 80a02c4:	682a      	ldr	r2, [r5, #0]
 80a02c6:	fb0a f303 	mul.w	r3, sl, r3
 80a02ca:	18d1      	adds	r1, r2, r3
 80a02cc:	58d3      	ldr	r3, [r2, r3]
                return 0;
            }
        }

        start = micros();
        while (pinReadFast(echoPin) != LOW) {
 80a02ce:	888a      	ldrh	r2, [r1, #4]
 80a02d0:	691b      	ldr	r3, [r3, #16]
 80a02d2:	421a      	tst	r2, r3
 80a02d4:	d006      	beq.n	80a02e4 <_ZN7HC_SR0422triggerAndMeasurePulseEv+0x8c>
 80a02d6:	f000 f855 	bl	80a0384 <HAL_Timer_Get_Micro_Seconds>
            duration = micros() - start;
 80a02da:	ebc9 0400 	rsb	r4, r9, r0
            if (duration >= timeoutLow) {
 80a02de:	42b4      	cmp	r4, r6
 80a02e0:	d9ef      	bls.n	80a02c2 <_ZN7HC_SR0422triggerAndMeasurePulseEv+0x6a>
 80a02e2:	e7e5      	b.n	80a02b0 <_ZN7HC_SR0422triggerAndMeasurePulseEv+0x58>
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
 80a02e4:	4640      	mov	r0, r8
 80a02e6:	f000 f865 	bl	80a03b4 <HAL_enable_irq>
                return 0;
            }
        }
        return duration;
    }
}
 80a02ea:	4620      	mov	r0, r4
 80a02ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a02f0:	20000088 	.word	0x20000088

080a02f4 <_ZN7HC_SR046distCMEv>:
    pinMode(trigPin, OUTPUT);
    pinMode(echoPin, INPUT);
}

float HC_SR04::distCM()
{
 80a02f4:	b510      	push	{r4, lr}
 80a02f6:	4604      	mov	r4, r0
    // Speed of sound is approx 343 m/s
    // 343 m/s * 100 cm/m * 0.000001 s/us / 2.0 trips
    const float uSecondsToCM = ((343.0f * 100.0 * 0.000001f) /  2.0f);
    unsigned long timeUntilLow = triggerAndMeasurePulse();
 80a02f8:	f7ff ffae 	bl	80a0258 <_ZN7HC_SR0422triggerAndMeasurePulseEv>
    if (timeUntilLow == 0) return NO_SIGNAL;
 80a02fc:	b908      	cbnz	r0, 80a0302 <_ZN7HC_SR046distCMEv+0xe>
 80a02fe:	6820      	ldr	r0, [r4, #0]
 80a0300:	bd10      	pop	{r4, pc}
    return (float)timeUntilLow * uSecondsToCM;
 80a0302:	f001 fdad 	bl	80a1e60 <__aeabi_ui2f>
 80a0306:	4902      	ldr	r1, [pc, #8]	; (80a0310 <_ZN7HC_SR046distCMEv+0x1c>)
 80a0308:	f001 fe02 	bl	80a1f10 <__aeabi_fmul>
}
 80a030c:	bd10      	pop	{r4, pc}
 80a030e:	bf00      	nop
 80a0310:	3c8c7e28 	.word	0x3c8c7e28

080a0314 <_GLOBAL__sub_I__ZN7HC_SR04C2Eii>:
                return 0;
            }
        }
        return duration;
    }
}
 80a0314:	b508      	push	{r3, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0316:	f000 f805 	bl	80a0324 <HAL_Pin_Map>
 80a031a:	4b01      	ldr	r3, [pc, #4]	; (80a0320 <_GLOBAL__sub_I__ZN7HC_SR04C2Eii+0xc>)
 80a031c:	6018      	str	r0, [r3, #0]
 80a031e:	bd08      	pop	{r3, pc}
 80a0320:	20000088 	.word	0x20000088

080a0324 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0324:	b508      	push	{r3, lr}
 80a0326:	4b02      	ldr	r3, [pc, #8]	; (80a0330 <HAL_Pin_Map+0xc>)
 80a0328:	681b      	ldr	r3, [r3, #0]
 80a032a:	681b      	ldr	r3, [r3, #0]
 80a032c:	9301      	str	r3, [sp, #4]
 80a032e:	bd08      	pop	{r3, pc}
 80a0330:	080601b0 	.word	0x080601b0

080a0334 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0334:	b508      	push	{r3, lr}
 80a0336:	4b02      	ldr	r3, [pc, #8]	; (80a0340 <HAL_Pin_Mode+0xc>)
 80a0338:	681b      	ldr	r3, [r3, #0]
 80a033a:	689b      	ldr	r3, [r3, #8]
 80a033c:	9301      	str	r3, [sp, #4]
 80a033e:	bd08      	pop	{r3, pc}
 80a0340:	080601b0 	.word	0x080601b0

080a0344 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0344:	b508      	push	{r3, lr}
 80a0346:	4b02      	ldr	r3, [pc, #8]	; (80a0350 <HAL_SPI_Init+0xc>)
 80a0348:	681b      	ldr	r3, [r3, #0]
 80a034a:	69db      	ldr	r3, [r3, #28]
 80a034c:	9301      	str	r3, [sp, #4]
 80a034e:	bd08      	pop	{r3, pc}
 80a0350:	080601b4 	.word	0x080601b4

080a0354 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0354:	b508      	push	{r3, lr}
 80a0356:	4b02      	ldr	r3, [pc, #8]	; (80a0360 <HAL_SPI_Is_Enabled+0xc>)
 80a0358:	681b      	ldr	r3, [r3, #0]
 80a035a:	6a1b      	ldr	r3, [r3, #32]
 80a035c:	9301      	str	r3, [sp, #4]
 80a035e:	bd08      	pop	{r3, pc}
 80a0360:	080601b4 	.word	0x080601b4

080a0364 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0364:	b508      	push	{r3, lr}
 80a0366:	4b02      	ldr	r3, [pc, #8]	; (80a0370 <HAL_RNG_GetRandomNumber+0xc>)
 80a0368:	681b      	ldr	r3, [r3, #0]
 80a036a:	685b      	ldr	r3, [r3, #4]
 80a036c:	9301      	str	r3, [sp, #4]
 80a036e:	bd08      	pop	{r3, pc}
 80a0370:	0806019c 	.word	0x0806019c

080a0374 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a0374:	b508      	push	{r3, lr}
 80a0376:	4b02      	ldr	r3, [pc, #8]	; (80a0380 <HAL_Delay_Microseconds+0xc>)
 80a0378:	681b      	ldr	r3, [r3, #0]
 80a037a:	68db      	ldr	r3, [r3, #12]
 80a037c:	9301      	str	r3, [sp, #4]
 80a037e:	bd08      	pop	{r3, pc}
 80a0380:	0806019c 	.word	0x0806019c

080a0384 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a0384:	b508      	push	{r3, lr}
 80a0386:	4b02      	ldr	r3, [pc, #8]	; (80a0390 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a0388:	681b      	ldr	r3, [r3, #0]
 80a038a:	691b      	ldr	r3, [r3, #16]
 80a038c:	9301      	str	r3, [sp, #4]
 80a038e:	bd08      	pop	{r3, pc}
 80a0390:	0806019c 	.word	0x0806019c

080a0394 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0394:	b508      	push	{r3, lr}
 80a0396:	4b02      	ldr	r3, [pc, #8]	; (80a03a0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0398:	681b      	ldr	r3, [r3, #0]
 80a039a:	695b      	ldr	r3, [r3, #20]
 80a039c:	9301      	str	r3, [sp, #4]
 80a039e:	bd08      	pop	{r3, pc}
 80a03a0:	0806019c 	.word	0x0806019c

080a03a4 <HAL_disable_irq>:
DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
DYNALIB_FN(BASE_IDX + 11, hal, HAL_EEPROM_Length, size_t(void))

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
 80a03a4:	b508      	push	{r3, lr}
 80a03a6:	4b02      	ldr	r3, [pc, #8]	; (80a03b0 <HAL_disable_irq+0xc>)
 80a03a8:	681b      	ldr	r3, [r3, #0]
 80a03aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a03ac:	9301      	str	r3, [sp, #4]
 80a03ae:	bd08      	pop	{r3, pc}
 80a03b0:	0806019c 	.word	0x0806019c

080a03b4 <HAL_enable_irq>:
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
 80a03b4:	b508      	push	{r3, lr}
 80a03b6:	4b02      	ldr	r3, [pc, #8]	; (80a03c0 <HAL_enable_irq+0xc>)
 80a03b8:	681b      	ldr	r3, [r3, #0]
 80a03ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a03bc:	9301      	str	r3, [sp, #4]
 80a03be:	bd08      	pop	{r3, pc}
 80a03c0:	0806019c 	.word	0x0806019c

080a03c4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a03c4:	b508      	push	{r3, lr}
 80a03c6:	4b02      	ldr	r3, [pc, #8]	; (80a03d0 <os_mutex_recursive_create+0xc>)
 80a03c8:	681b      	ldr	r3, [r3, #0]
 80a03ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a03cc:	9301      	str	r3, [sp, #4]
 80a03ce:	bd08      	pop	{r3, pc}
 80a03d0:	080601d0 	.word	0x080601d0

080a03d4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a03d4:	b508      	push	{r3, lr}
 80a03d6:	4b02      	ldr	r3, [pc, #8]	; (80a03e0 <os_mutex_recursive_destroy+0xc>)
 80a03d8:	681b      	ldr	r3, [r3, #0]
 80a03da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a03dc:	9301      	str	r3, [sp, #4]
 80a03de:	bd08      	pop	{r3, pc}
 80a03e0:	080601d0 	.word	0x080601d0

080a03e4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a03e4:	b508      	push	{r3, lr}
 80a03e6:	4b02      	ldr	r3, [pc, #8]	; (80a03f0 <HAL_USART_Init+0xc>)
 80a03e8:	681b      	ldr	r3, [r3, #0]
 80a03ea:	699b      	ldr	r3, [r3, #24]
 80a03ec:	9301      	str	r3, [sp, #4]
 80a03ee:	bd08      	pop	{r3, pc}
 80a03f0:	080601c4 	.word	0x080601c4

080a03f4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a03f4:	b508      	push	{r3, lr}
 80a03f6:	4b02      	ldr	r3, [pc, #8]	; (80a0400 <HAL_USART_Write_Data+0xc>)
 80a03f8:	681b      	ldr	r3, [r3, #0]
 80a03fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a03fc:	9301      	str	r3, [sp, #4]
 80a03fe:	bd08      	pop	{r3, pc}
 80a0400:	080601c4 	.word	0x080601c4

080a0404 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0404:	b508      	push	{r3, lr}
 80a0406:	4b02      	ldr	r3, [pc, #8]	; (80a0410 <HAL_USART_Available_Data+0xc>)
 80a0408:	681b      	ldr	r3, [r3, #0]
 80a040a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a040c:	9301      	str	r3, [sp, #4]
 80a040e:	bd08      	pop	{r3, pc}
 80a0410:	080601c4 	.word	0x080601c4

080a0414 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0414:	b508      	push	{r3, lr}
 80a0416:	4b02      	ldr	r3, [pc, #8]	; (80a0420 <HAL_USART_Read_Data+0xc>)
 80a0418:	681b      	ldr	r3, [r3, #0]
 80a041a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a041c:	9301      	str	r3, [sp, #4]
 80a041e:	bd08      	pop	{r3, pc}
 80a0420:	080601c4 	.word	0x080601c4

080a0424 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0424:	b508      	push	{r3, lr}
 80a0426:	4b02      	ldr	r3, [pc, #8]	; (80a0430 <HAL_USART_Peek_Data+0xc>)
 80a0428:	681b      	ldr	r3, [r3, #0]
 80a042a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a042c:	9301      	str	r3, [sp, #4]
 80a042e:	bd08      	pop	{r3, pc}
 80a0430:	080601c4 	.word	0x080601c4

080a0434 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0434:	b508      	push	{r3, lr}
 80a0436:	4b02      	ldr	r3, [pc, #8]	; (80a0440 <HAL_USART_Flush_Data+0xc>)
 80a0438:	681b      	ldr	r3, [r3, #0]
 80a043a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a043c:	9301      	str	r3, [sp, #4]
 80a043e:	bd08      	pop	{r3, pc}
 80a0440:	080601c4 	.word	0x080601c4

080a0444 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0444:	b508      	push	{r3, lr}
 80a0446:	4b02      	ldr	r3, [pc, #8]	; (80a0450 <HAL_USART_Is_Enabled+0xc>)
 80a0448:	681b      	ldr	r3, [r3, #0]
 80a044a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a044c:	9301      	str	r3, [sp, #4]
 80a044e:	bd08      	pop	{r3, pc}
 80a0450:	080601c4 	.word	0x080601c4

080a0454 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0454:	b508      	push	{r3, lr}
 80a0456:	4b02      	ldr	r3, [pc, #8]	; (80a0460 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0458:	681b      	ldr	r3, [r3, #0]
 80a045a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a045c:	9301      	str	r3, [sp, #4]
 80a045e:	bd08      	pop	{r3, pc}
 80a0460:	080601c4 	.word	0x080601c4

080a0464 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0464:	b508      	push	{r3, lr}
 80a0466:	4b02      	ldr	r3, [pc, #8]	; (80a0470 <HAL_I2C_Write_Data+0xc>)
 80a0468:	681b      	ldr	r3, [r3, #0]
 80a046a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a046c:	9301      	str	r3, [sp, #4]
 80a046e:	bd08      	pop	{r3, pc}
 80a0470:	080601ac 	.word	0x080601ac

080a0474 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0474:	b508      	push	{r3, lr}
 80a0476:	4b02      	ldr	r3, [pc, #8]	; (80a0480 <HAL_I2C_Available_Data+0xc>)
 80a0478:	681b      	ldr	r3, [r3, #0]
 80a047a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a047c:	9301      	str	r3, [sp, #4]
 80a047e:	bd08      	pop	{r3, pc}
 80a0480:	080601ac 	.word	0x080601ac

080a0484 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0484:	b508      	push	{r3, lr}
 80a0486:	4b02      	ldr	r3, [pc, #8]	; (80a0490 <HAL_I2C_Read_Data+0xc>)
 80a0488:	681b      	ldr	r3, [r3, #0]
 80a048a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a048c:	9301      	str	r3, [sp, #4]
 80a048e:	bd08      	pop	{r3, pc}
 80a0490:	080601ac 	.word	0x080601ac

080a0494 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0494:	b508      	push	{r3, lr}
 80a0496:	4b02      	ldr	r3, [pc, #8]	; (80a04a0 <HAL_I2C_Peek_Data+0xc>)
 80a0498:	681b      	ldr	r3, [r3, #0]
 80a049a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a049c:	9301      	str	r3, [sp, #4]
 80a049e:	bd08      	pop	{r3, pc}
 80a04a0:	080601ac 	.word	0x080601ac

080a04a4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a04a4:	b508      	push	{r3, lr}
 80a04a6:	4b02      	ldr	r3, [pc, #8]	; (80a04b0 <HAL_I2C_Flush_Data+0xc>)
 80a04a8:	681b      	ldr	r3, [r3, #0]
 80a04aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a04ac:	9301      	str	r3, [sp, #4]
 80a04ae:	bd08      	pop	{r3, pc}
 80a04b0:	080601ac 	.word	0x080601ac

080a04b4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a04b4:	b508      	push	{r3, lr}
 80a04b6:	4b02      	ldr	r3, [pc, #8]	; (80a04c0 <HAL_I2C_Is_Enabled+0xc>)
 80a04b8:	681b      	ldr	r3, [r3, #0]
 80a04ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a04bc:	9301      	str	r3, [sp, #4]
 80a04be:	bd08      	pop	{r3, pc}
 80a04c0:	080601ac 	.word	0x080601ac

080a04c4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a04c4:	b508      	push	{r3, lr}
 80a04c6:	4b03      	ldr	r3, [pc, #12]	; (80a04d4 <HAL_I2C_Init+0x10>)
 80a04c8:	681b      	ldr	r3, [r3, #0]
 80a04ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a04ce:	9301      	str	r3, [sp, #4]
 80a04d0:	bd08      	pop	{r3, pc}
 80a04d2:	0000      	.short	0x0000
 80a04d4:	080601ac 	.word	0x080601ac

080a04d8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a04d8:	b508      	push	{r3, lr}
 80a04da:	4b02      	ldr	r3, [pc, #8]	; (80a04e4 <HAL_USB_USART_Init+0xc>)
 80a04dc:	681b      	ldr	r3, [r3, #0]
 80a04de:	681b      	ldr	r3, [r3, #0]
 80a04e0:	9301      	str	r3, [sp, #4]
 80a04e2:	bd08      	pop	{r3, pc}
 80a04e4:	080601d8 	.word	0x080601d8

080a04e8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a04e8:	b508      	push	{r3, lr}
 80a04ea:	4b02      	ldr	r3, [pc, #8]	; (80a04f4 <HAL_USB_USART_Begin+0xc>)
 80a04ec:	681b      	ldr	r3, [r3, #0]
 80a04ee:	685b      	ldr	r3, [r3, #4]
 80a04f0:	9301      	str	r3, [sp, #4]
 80a04f2:	bd08      	pop	{r3, pc}
 80a04f4:	080601d8 	.word	0x080601d8

080a04f8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a04f8:	b508      	push	{r3, lr}
 80a04fa:	4b02      	ldr	r3, [pc, #8]	; (80a0504 <HAL_USB_USART_Available_Data+0xc>)
 80a04fc:	681b      	ldr	r3, [r3, #0]
 80a04fe:	691b      	ldr	r3, [r3, #16]
 80a0500:	9301      	str	r3, [sp, #4]
 80a0502:	bd08      	pop	{r3, pc}
 80a0504:	080601d8 	.word	0x080601d8

080a0508 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0508:	b508      	push	{r3, lr}
 80a050a:	4b02      	ldr	r3, [pc, #8]	; (80a0514 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a050c:	681b      	ldr	r3, [r3, #0]
 80a050e:	695b      	ldr	r3, [r3, #20]
 80a0510:	9301      	str	r3, [sp, #4]
 80a0512:	bd08      	pop	{r3, pc}
 80a0514:	080601d8 	.word	0x080601d8

080a0518 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0518:	b508      	push	{r3, lr}
 80a051a:	4b02      	ldr	r3, [pc, #8]	; (80a0524 <HAL_USB_USART_Receive_Data+0xc>)
 80a051c:	681b      	ldr	r3, [r3, #0]
 80a051e:	699b      	ldr	r3, [r3, #24]
 80a0520:	9301      	str	r3, [sp, #4]
 80a0522:	bd08      	pop	{r3, pc}
 80a0524:	080601d8 	.word	0x080601d8

080a0528 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0528:	b508      	push	{r3, lr}
 80a052a:	4b02      	ldr	r3, [pc, #8]	; (80a0534 <HAL_USB_USART_Send_Data+0xc>)
 80a052c:	681b      	ldr	r3, [r3, #0]
 80a052e:	69db      	ldr	r3, [r3, #28]
 80a0530:	9301      	str	r3, [sp, #4]
 80a0532:	bd08      	pop	{r3, pc}
 80a0534:	080601d8 	.word	0x080601d8

080a0538 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0538:	b508      	push	{r3, lr}
 80a053a:	4b02      	ldr	r3, [pc, #8]	; (80a0544 <HAL_USB_USART_Flush_Data+0xc>)
 80a053c:	681b      	ldr	r3, [r3, #0]
 80a053e:	6a1b      	ldr	r3, [r3, #32]
 80a0540:	9301      	str	r3, [sp, #4]
 80a0542:	bd08      	pop	{r3, pc}
 80a0544:	080601d8 	.word	0x080601d8

080a0548 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0548:	b508      	push	{r3, lr}
 80a054a:	4b02      	ldr	r3, [pc, #8]	; (80a0554 <inet_gethostbyname+0xc>)
 80a054c:	681b      	ldr	r3, [r3, #0]
 80a054e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0550:	9301      	str	r3, [sp, #4]
 80a0552:	bd08      	pop	{r3, pc}
 80a0554:	080601c0 	.word	0x080601c0

080a0558 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0558:	b508      	push	{r3, lr}
 80a055a:	4b02      	ldr	r3, [pc, #8]	; (80a0564 <set_system_mode+0xc>)
 80a055c:	681b      	ldr	r3, [r3, #0]
 80a055e:	685b      	ldr	r3, [r3, #4]
 80a0560:	9301      	str	r3, [sp, #4]
 80a0562:	bd08      	pop	{r3, pc}
 80a0564:	080601a4 	.word	0x080601a4

080a0568 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0568:	b508      	push	{r3, lr}
 80a056a:	4b02      	ldr	r3, [pc, #8]	; (80a0574 <system_delay_ms+0xc>)
 80a056c:	681b      	ldr	r3, [r3, #0]
 80a056e:	695b      	ldr	r3, [r3, #20]
 80a0570:	9301      	str	r3, [sp, #4]
 80a0572:	bd08      	pop	{r3, pc}
 80a0574:	080601a4 	.word	0x080601a4

080a0578 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a0578:	b508      	push	{r3, lr}
 80a057a:	4b02      	ldr	r3, [pc, #8]	; (80a0584 <application_thread_current+0xc>)
 80a057c:	681b      	ldr	r3, [r3, #0]
 80a057e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0580:	9301      	str	r3, [sp, #4]
 80a0582:	bd08      	pop	{r3, pc}
 80a0584:	080601a4 	.word	0x080601a4

080a0588 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a0588:	b508      	push	{r3, lr}
 80a058a:	4b02      	ldr	r3, [pc, #8]	; (80a0594 <application_thread_invoke+0xc>)
 80a058c:	681b      	ldr	r3, [r3, #0]
 80a058e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0590:	9301      	str	r3, [sp, #4]
 80a0592:	bd08      	pop	{r3, pc}
 80a0594:	080601a4 	.word	0x080601a4

080a0598 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0598:	b508      	push	{r3, lr}
 80a059a:	4b03      	ldr	r3, [pc, #12]	; (80a05a8 <system_ctrl_set_app_request_handler+0x10>)
 80a059c:	681b      	ldr	r3, [r3, #0]
 80a059e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a05a2:	9301      	str	r3, [sp, #4]
 80a05a4:	bd08      	pop	{r3, pc}
 80a05a6:	0000      	.short	0x0000
 80a05a8:	080601a4 	.word	0x080601a4

080a05ac <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a05ac:	b508      	push	{r3, lr}
 80a05ae:	4b03      	ldr	r3, [pc, #12]	; (80a05bc <system_ctrl_set_result+0x10>)
 80a05b0:	681b      	ldr	r3, [r3, #0]
 80a05b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a05b6:	9301      	str	r3, [sp, #4]
 80a05b8:	bd08      	pop	{r3, pc}
 80a05ba:	0000      	.short	0x0000
 80a05bc:	080601a4 	.word	0x080601a4

080a05c0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a05c0:	b508      	push	{r3, lr}
 80a05c2:	4b02      	ldr	r3, [pc, #8]	; (80a05cc <network_connect+0xc>)
 80a05c4:	681b      	ldr	r3, [r3, #0]
 80a05c6:	685b      	ldr	r3, [r3, #4]
 80a05c8:	9301      	str	r3, [sp, #4]
 80a05ca:	bd08      	pop	{r3, pc}
 80a05cc:	080601c8 	.word	0x080601c8

080a05d0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a05d0:	b508      	push	{r3, lr}
 80a05d2:	4b02      	ldr	r3, [pc, #8]	; (80a05dc <network_connecting+0xc>)
 80a05d4:	681b      	ldr	r3, [r3, #0]
 80a05d6:	689b      	ldr	r3, [r3, #8]
 80a05d8:	9301      	str	r3, [sp, #4]
 80a05da:	bd08      	pop	{r3, pc}
 80a05dc:	080601c8 	.word	0x080601c8

080a05e0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a05e0:	b508      	push	{r3, lr}
 80a05e2:	4b02      	ldr	r3, [pc, #8]	; (80a05ec <network_disconnect+0xc>)
 80a05e4:	681b      	ldr	r3, [r3, #0]
 80a05e6:	68db      	ldr	r3, [r3, #12]
 80a05e8:	9301      	str	r3, [sp, #4]
 80a05ea:	bd08      	pop	{r3, pc}
 80a05ec:	080601c8 	.word	0x080601c8

080a05f0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a05f0:	b508      	push	{r3, lr}
 80a05f2:	4b02      	ldr	r3, [pc, #8]	; (80a05fc <network_ready+0xc>)
 80a05f4:	681b      	ldr	r3, [r3, #0]
 80a05f6:	691b      	ldr	r3, [r3, #16]
 80a05f8:	9301      	str	r3, [sp, #4]
 80a05fa:	bd08      	pop	{r3, pc}
 80a05fc:	080601c8 	.word	0x080601c8

080a0600 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0600:	b508      	push	{r3, lr}
 80a0602:	4b02      	ldr	r3, [pc, #8]	; (80a060c <network_on+0xc>)
 80a0604:	681b      	ldr	r3, [r3, #0]
 80a0606:	695b      	ldr	r3, [r3, #20]
 80a0608:	9301      	str	r3, [sp, #4]
 80a060a:	bd08      	pop	{r3, pc}
 80a060c:	080601c8 	.word	0x080601c8

080a0610 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0610:	b508      	push	{r3, lr}
 80a0612:	4b02      	ldr	r3, [pc, #8]	; (80a061c <network_off+0xc>)
 80a0614:	681b      	ldr	r3, [r3, #0]
 80a0616:	699b      	ldr	r3, [r3, #24]
 80a0618:	9301      	str	r3, [sp, #4]
 80a061a:	bd08      	pop	{r3, pc}
 80a061c:	080601c8 	.word	0x080601c8

080a0620 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0620:	b508      	push	{r3, lr}
 80a0622:	4b02      	ldr	r3, [pc, #8]	; (80a062c <network_listen+0xc>)
 80a0624:	681b      	ldr	r3, [r3, #0]
 80a0626:	69db      	ldr	r3, [r3, #28]
 80a0628:	9301      	str	r3, [sp, #4]
 80a062a:	bd08      	pop	{r3, pc}
 80a062c:	080601c8 	.word	0x080601c8

080a0630 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0630:	b508      	push	{r3, lr}
 80a0632:	4b02      	ldr	r3, [pc, #8]	; (80a063c <network_listening+0xc>)
 80a0634:	681b      	ldr	r3, [r3, #0]
 80a0636:	6a1b      	ldr	r3, [r3, #32]
 80a0638:	9301      	str	r3, [sp, #4]
 80a063a:	bd08      	pop	{r3, pc}
 80a063c:	080601c8 	.word	0x080601c8

080a0640 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0640:	b508      	push	{r3, lr}
 80a0642:	4b02      	ldr	r3, [pc, #8]	; (80a064c <network_set_listen_timeout+0xc>)
 80a0644:	681b      	ldr	r3, [r3, #0]
 80a0646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0648:	9301      	str	r3, [sp, #4]
 80a064a:	bd08      	pop	{r3, pc}
 80a064c:	080601c8 	.word	0x080601c8

080a0650 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0650:	b508      	push	{r3, lr}
 80a0652:	4b02      	ldr	r3, [pc, #8]	; (80a065c <network_get_listen_timeout+0xc>)
 80a0654:	681b      	ldr	r3, [r3, #0]
 80a0656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0658:	9301      	str	r3, [sp, #4]
 80a065a:	bd08      	pop	{r3, pc}
 80a065c:	080601c8 	.word	0x080601c8

080a0660 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a0660:	b508      	push	{r3, lr}
 80a0662:	4b02      	ldr	r3, [pc, #8]	; (80a066c <spark_process+0xc>)
 80a0664:	681b      	ldr	r3, [r3, #0]
 80a0666:	689b      	ldr	r3, [r3, #8]
 80a0668:	9301      	str	r3, [sp, #4]
 80a066a:	bd08      	pop	{r3, pc}
 80a066c:	080601cc 	.word	0x080601cc

080a0670 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a0670:	b508      	push	{r3, lr}
 80a0672:	4b02      	ldr	r3, [pc, #8]	; (80a067c <spark_cloud_flag_connected+0xc>)
 80a0674:	681b      	ldr	r3, [r3, #0]
 80a0676:	695b      	ldr	r3, [r3, #20]
 80a0678:	9301      	str	r3, [sp, #4]
 80a067a:	bd08      	pop	{r3, pc}
 80a067c:	080601cc 	.word	0x080601cc

080a0680 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a0680:	b508      	push	{r3, lr}
 80a0682:	4b02      	ldr	r3, [pc, #8]	; (80a068c <spark_send_event+0xc>)
 80a0684:	681b      	ldr	r3, [r3, #0]
 80a0686:	6a1b      	ldr	r3, [r3, #32]
 80a0688:	9301      	str	r3, [sp, #4]
 80a068a:	bd08      	pop	{r3, pc}
 80a068c:	080601cc 	.word	0x080601cc

080a0690 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0690:	b508      	push	{r3, lr}
 80a0692:	4b02      	ldr	r3, [pc, #8]	; (80a069c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0694:	681b      	ldr	r3, [r3, #0]
 80a0696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0698:	9301      	str	r3, [sp, #4]
 80a069a:	bd08      	pop	{r3, pc}
 80a069c:	080601cc 	.word	0x080601cc

080a06a0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a06a0:	b508      	push	{r3, lr}
 80a06a2:	4b02      	ldr	r3, [pc, #8]	; (80a06ac <malloc+0xc>)
 80a06a4:	681b      	ldr	r3, [r3, #0]
 80a06a6:	681b      	ldr	r3, [r3, #0]
 80a06a8:	9301      	str	r3, [sp, #4]
 80a06aa:	bd08      	pop	{r3, pc}
 80a06ac:	080601a0 	.word	0x080601a0

080a06b0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a06b0:	b508      	push	{r3, lr}
 80a06b2:	4b02      	ldr	r3, [pc, #8]	; (80a06bc <free+0xc>)
 80a06b4:	681b      	ldr	r3, [r3, #0]
 80a06b6:	685b      	ldr	r3, [r3, #4]
 80a06b8:	9301      	str	r3, [sp, #4]
 80a06ba:	bd08      	pop	{r3, pc}
 80a06bc:	080601a0 	.word	0x080601a0

080a06c0 <sprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 80a06c0:	b508      	push	{r3, lr}
 80a06c2:	4b02      	ldr	r3, [pc, #8]	; (80a06cc <sprintf+0xc>)
 80a06c4:	681b      	ldr	r3, [r3, #0]
 80a06c6:	68db      	ldr	r3, [r3, #12]
 80a06c8:	9301      	str	r3, [sp, #4]
 80a06ca:	bd08      	pop	{r3, pc}
 80a06cc:	080601a0 	.word	0x080601a0

080a06d0 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a06d0:	b508      	push	{r3, lr}
 80a06d2:	4b02      	ldr	r3, [pc, #8]	; (80a06dc <abort+0xc>)
 80a06d4:	681b      	ldr	r3, [r3, #0]
 80a06d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a06d8:	9301      	str	r3, [sp, #4]
 80a06da:	bd08      	pop	{r3, pc}
 80a06dc:	080601a0 	.word	0x080601a0

080a06e0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a06e0:	b508      	push	{r3, lr}
 80a06e2:	4b02      	ldr	r3, [pc, #8]	; (80a06ec <_malloc_r+0xc>)
 80a06e4:	681b      	ldr	r3, [r3, #0]
 80a06e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a06e8:	9301      	str	r3, [sp, #4]
 80a06ea:	bd08      	pop	{r3, pc}
 80a06ec:	080601a0 	.word	0x080601a0

080a06f0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a06f0:	b570      	push	{r4, r5, r6, lr}
 80a06f2:	4604      	mov	r4, r0
 80a06f4:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a06f6:	2500      	movs	r5, #0
 80a06f8:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a06fc:	f7ff fe62 	bl	80a03c4 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a0700:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a0702:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 80a0704:	f7ff fe1e 	bl	80a0344 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a0708:	6065      	str	r5, [r4, #4]
}
 80a070a:	4620      	mov	r0, r4
 80a070c:	bd70      	pop	{r4, r5, r6, pc}

080a070e <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a070e:	7800      	ldrb	r0, [r0, #0]
 80a0710:	f7ff be20 	b.w	80a0354 <HAL_SPI_Is_Enabled>

080a0714 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a0714:	b510      	push	{r4, lr}
 80a0716:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a0718:	6800      	ldr	r0, [r0, #0]
 80a071a:	b118      	cbz	r0, 80a0724 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80a071c:	f7ff ffc8 	bl	80a06b0 <free>
            wakeupSource_ = nullptr;
 80a0720:	2300      	movs	r3, #0
 80a0722:	6023      	str	r3, [r4, #0]
 80a0724:	bd10      	pop	{r4, pc}

080a0726 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a0726:	b510      	push	{r4, lr}
 80a0728:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80a072a:	f7ff fff3 	bl	80a0714 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a072e:	4620      	mov	r0, r4
 80a0730:	bd10      	pop	{r4, pc}
	...

080a0734 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0734:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a0738:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a073a:	4c08      	ldr	r4, [pc, #32]	; (80a075c <_GLOBAL__sub_I_System+0x28>)
 80a073c:	2000      	movs	r0, #0
 80a073e:	6020      	str	r0, [r4, #0]
 80a0740:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0742:	71a0      	strb	r0, [r4, #6]
 80a0744:	8120      	strh	r0, [r4, #8]
 80a0746:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0748:	f7ff ff06 	bl	80a0558 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a074c:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a074e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a0752:	4a03      	ldr	r2, [pc, #12]	; (80a0760 <_GLOBAL__sub_I_System+0x2c>)
 80a0754:	4903      	ldr	r1, [pc, #12]	; (80a0764 <_GLOBAL__sub_I_System+0x30>)
 80a0756:	f000 bfa9 	b.w	80a16ac <__aeabi_atexit>
 80a075a:	bf00      	nop
 80a075c:	2000008c 	.word	0x2000008c
 80a0760:	20000068 	.word	0x20000068
 80a0764:	080a0727 	.word	0x080a0727

080a0768 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a076a:	4606      	mov	r6, r0
 80a076c:	460d      	mov	r5, r1
 80a076e:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0770:	2400      	movs	r4, #0
  while (size--) {
 80a0772:	42bd      	cmp	r5, r7
 80a0774:	d00c      	beq.n	80a0790 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0776:	6833      	ldr	r3, [r6, #0]
 80a0778:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a077c:	689b      	ldr	r3, [r3, #8]
 80a077e:	4630      	mov	r0, r6
 80a0780:	4798      	blx	r3
     if (chunk>=0)
 80a0782:	2800      	cmp	r0, #0
 80a0784:	db01      	blt.n	80a078a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0786:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0788:	e7f3      	b.n	80a0772 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a078a:	2c00      	cmp	r4, #0
 80a078c:	bf08      	it	eq
 80a078e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0790:	4620      	mov	r0, r4
 80a0792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0794 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0794:	b570      	push	{r4, r5, r6, lr}
 80a0796:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0798:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a079a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a079c:	b149      	cbz	r1, 80a07b2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a079e:	f001 fd6c 	bl	80a227a <strlen>
 80a07a2:	682b      	ldr	r3, [r5, #0]
 80a07a4:	4602      	mov	r2, r0
 80a07a6:	4621      	mov	r1, r4
 80a07a8:	4628      	mov	r0, r5
    }
 80a07aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a07ae:	68db      	ldr	r3, [r3, #12]
 80a07b0:	4718      	bx	r3
    }
 80a07b2:	bd70      	pop	{r4, r5, r6, pc}

080a07b4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a07b4:	6803      	ldr	r3, [r0, #0]
 80a07b6:	689b      	ldr	r3, [r3, #8]
 80a07b8:	4718      	bx	r3

080a07ba <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a07ba:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a07bc:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a07be:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a07c0:	f7ff fff8 	bl	80a07b4 <_ZN5Print5printEc>
  n += print('\n');
 80a07c4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a07c6:	4604      	mov	r4, r0
  n += print('\n');
 80a07c8:	4628      	mov	r0, r5
 80a07ca:	f7ff fff3 	bl	80a07b4 <_ZN5Print5printEc>
  return n;
}
 80a07ce:	4420      	add	r0, r4
 80a07d0:	bd38      	pop	{r3, r4, r5, pc}

080a07d2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a07d2:	b538      	push	{r3, r4, r5, lr}
 80a07d4:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a07d6:	f7ff ffdd 	bl	80a0794 <_ZN5Print5writeEPKc>
 80a07da:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a07dc:	4628      	mov	r0, r5
 80a07de:	f7ff ffec 	bl	80a07ba <_ZN5Print7printlnEv>
  return n;
}
 80a07e2:	4420      	add	r0, r4
 80a07e4:	bd38      	pop	{r3, r4, r5, pc}

080a07e6 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a07e6:	2a01      	cmp	r2, #1
 80a07e8:	bf98      	it	ls
 80a07ea:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a07ec:	b530      	push	{r4, r5, lr}
 80a07ee:	460b      	mov	r3, r1
 80a07f0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a07f2:	2100      	movs	r1, #0
 80a07f4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a07f8:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a07fc:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a0800:	fb05 3312 	mls	r3, r5, r2, r3
 80a0804:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0806:	2b09      	cmp	r3, #9
 80a0808:	bf94      	ite	ls
 80a080a:	3330      	addls	r3, #48	; 0x30
 80a080c:	3337      	addhi	r3, #55	; 0x37
 80a080e:	b2db      	uxtb	r3, r3
 80a0810:	4621      	mov	r1, r4
 80a0812:	f804 3901 	strb.w	r3, [r4], #-1
 80a0816:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0818:	2d00      	cmp	r5, #0
 80a081a:	d1ef      	bne.n	80a07fc <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a081c:	f7ff ffba 	bl	80a0794 <_ZN5Print5writeEPKc>
}
 80a0820:	b00b      	add	sp, #44	; 0x2c
 80a0822:	bd30      	pop	{r4, r5, pc}

080a0824 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0824:	2300      	movs	r3, #0
 80a0826:	461a      	mov	r2, r3
 80a0828:	4619      	mov	r1, r3
 80a082a:	6840      	ldr	r0, [r0, #4]
 80a082c:	f7ff bee8 	b.w	80a0600 <network_on>

080a0830 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0830:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a0832:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0834:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a0836:	b17c      	cbz	r4, 80a0858 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0838:	6863      	ldr	r3, [r4, #4]
 80a083a:	3b01      	subs	r3, #1
 80a083c:	6063      	str	r3, [r4, #4]
 80a083e:	b95b      	cbnz	r3, 80a0858 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a0840:	6823      	ldr	r3, [r4, #0]
 80a0842:	4620      	mov	r0, r4
 80a0844:	689b      	ldr	r3, [r3, #8]
 80a0846:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0848:	68a3      	ldr	r3, [r4, #8]
 80a084a:	3b01      	subs	r3, #1
 80a084c:	60a3      	str	r3, [r4, #8]
 80a084e:	b91b      	cbnz	r3, 80a0858 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0850:	6823      	ldr	r3, [r4, #0]
 80a0852:	4620      	mov	r0, r4
 80a0854:	68db      	ldr	r3, [r3, #12]
 80a0856:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a0858:	4628      	mov	r0, r5
 80a085a:	bd38      	pop	{r3, r4, r5, pc}

080a085c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a085c:	680b      	ldr	r3, [r1, #0]
 80a085e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a0860:	b113      	cbz	r3, 80a0868 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a0862:	685a      	ldr	r2, [r3, #4]
 80a0864:	3201      	adds	r2, #1
 80a0866:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a0868:	4770      	bx	lr
	...

080a086c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a086c:	4a01      	ldr	r2, [pc, #4]	; (80a0874 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a086e:	4b02      	ldr	r3, [pc, #8]	; (80a0878 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0870:	601a      	str	r2, [r3, #0]
 80a0872:	4770      	bx	lr
 80a0874:	080a2343 	.word	0x080a2343
 80a0878:	20000098 	.word	0x20000098

080a087c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a087c:	4b02      	ldr	r3, [pc, #8]	; (80a0888 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a087e:	681a      	ldr	r2, [r3, #0]
 80a0880:	4b02      	ldr	r3, [pc, #8]	; (80a088c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0882:	601a      	str	r2, [r3, #0]
 80a0884:	4770      	bx	lr
 80a0886:	bf00      	nop
 80a0888:	20000000 	.word	0x20000000
 80a088c:	2000009c 	.word	0x2000009c

080a0890 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0890:	2100      	movs	r1, #0
 80a0892:	f7ff be69 	b.w	80a0568 <system_delay_ms>

080a0896 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0896:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0898:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a089a:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a089c:	b113      	cbz	r3, 80a08a4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a089e:	2203      	movs	r2, #3
 80a08a0:	4601      	mov	r1, r0
 80a08a2:	4798      	blx	r3
    }
 80a08a4:	4620      	mov	r0, r4
 80a08a6:	bd10      	pop	{r4, pc}

080a08a8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a08a8:	b510      	push	{r4, lr}
 80a08aa:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a08ac:	f7ff fff3 	bl	80a0896 <_ZNSt14_Function_baseD1Ev>
 80a08b0:	4620      	mov	r0, r4
 80a08b2:	bd10      	pop	{r4, pc}

080a08b4 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a08b4:	b513      	push	{r0, r1, r4, lr}
 80a08b6:	460b      	mov	r3, r1
 80a08b8:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a08ba:	c803      	ldmia	r0, {r0, r1}
 80a08bc:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a08c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a08c4:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a08c8:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a08cc:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a08d0:	b002      	add	sp, #8
 80a08d2:	bd10      	pop	{r4, pc}

080a08d4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a08d4:	4803      	ldr	r0, [pc, #12]	; (80a08e4 <_GLOBAL__sub_I_RGB+0x10>)
 80a08d6:	2300      	movs	r3, #0
 80a08d8:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a08da:	4a03      	ldr	r2, [pc, #12]	; (80a08e8 <_GLOBAL__sub_I_RGB+0x14>)
 80a08dc:	4903      	ldr	r1, [pc, #12]	; (80a08ec <_GLOBAL__sub_I_RGB+0x18>)
 80a08de:	f000 bee5 	b.w	80a16ac <__aeabi_atexit>
 80a08e2:	bf00      	nop
 80a08e4:	200000a0 	.word	0x200000a0
 80a08e8:	20000068 	.word	0x20000068
 80a08ec:	080a08a9 	.word	0x080a08a9

080a08f0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a08f0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a08f2:	4b14      	ldr	r3, [pc, #80]	; (80a0944 <serialEventRun+0x54>)
 80a08f4:	b133      	cbz	r3, 80a0904 <serialEventRun+0x14>
 80a08f6:	f000 fc2f 	bl	80a1158 <_Z16_fetch_usbserialv>
 80a08fa:	6803      	ldr	r3, [r0, #0]
 80a08fc:	691b      	ldr	r3, [r3, #16]
 80a08fe:	4798      	blx	r3
 80a0900:	2800      	cmp	r0, #0
 80a0902:	dc16      	bgt.n	80a0932 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0904:	4b10      	ldr	r3, [pc, #64]	; (80a0948 <serialEventRun+0x58>)
 80a0906:	b133      	cbz	r3, 80a0916 <serialEventRun+0x26>
 80a0908:	f000 fce4 	bl	80a12d4 <_Z22__fetch_global_Serial1v>
 80a090c:	6803      	ldr	r3, [r0, #0]
 80a090e:	691b      	ldr	r3, [r3, #16]
 80a0910:	4798      	blx	r3
 80a0912:	2800      	cmp	r0, #0
 80a0914:	dc10      	bgt.n	80a0938 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0916:	4b0d      	ldr	r3, [pc, #52]	; (80a094c <serialEventRun+0x5c>)
 80a0918:	b10b      	cbz	r3, 80a091e <serialEventRun+0x2e>
 80a091a:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a091e:	4b0c      	ldr	r3, [pc, #48]	; (80a0950 <serialEventRun+0x60>)
 80a0920:	b17b      	cbz	r3, 80a0942 <serialEventRun+0x52>
 80a0922:	f000 fc55 	bl	80a11d0 <_Z17_fetch_usbserial1v>
 80a0926:	6803      	ldr	r3, [r0, #0]
 80a0928:	691b      	ldr	r3, [r3, #16]
 80a092a:	4798      	blx	r3
 80a092c:	2800      	cmp	r0, #0
 80a092e:	dc06      	bgt.n	80a093e <serialEventRun+0x4e>
 80a0930:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a0932:	f3af 8000 	nop.w
 80a0936:	e7e5      	b.n	80a0904 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0938:	f3af 8000 	nop.w
 80a093c:	e7eb      	b.n	80a0916 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a093e:	f3af 8000 	nop.w
 80a0942:	bd08      	pop	{r3, pc}
	...

080a0954 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0954:	b508      	push	{r3, lr}
	serialEventRun();
 80a0956:	f7ff ffcb 	bl	80a08f0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a095a:	f7ff fd1b 	bl	80a0394 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a095e:	4b01      	ldr	r3, [pc, #4]	; (80a0964 <_post_loop+0x10>)
 80a0960:	6018      	str	r0, [r3, #0]
 80a0962:	bd08      	pop	{r3, pc}
 80a0964:	20000534 	.word	0x20000534

080a0968 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0968:	4802      	ldr	r0, [pc, #8]	; (80a0974 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a096a:	4a03      	ldr	r2, [pc, #12]	; (80a0978 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a096c:	4903      	ldr	r1, [pc, #12]	; (80a097c <_Z33system_initialize_user_backup_ramv+0x14>)
 80a096e:	1a12      	subs	r2, r2, r0
 80a0970:	f001 bc2c 	b.w	80a21cc <memcpy>
 80a0974:	40024000 	.word	0x40024000
 80a0978:	40024004 	.word	0x40024004
 80a097c:	080a25a0 	.word	0x080a25a0

080a0980 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0980:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0982:	2300      	movs	r3, #0
 80a0984:	9300      	str	r3, [sp, #0]
 80a0986:	461a      	mov	r2, r3
 80a0988:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a098c:	f7ff fe0e 	bl	80a05ac <system_ctrl_set_result>
}
 80a0990:	b003      	add	sp, #12
 80a0992:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0998 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a0998:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a099a:	8843      	ldrh	r3, [r0, #2]
 80a099c:	2b0a      	cmp	r3, #10
 80a099e:	d008      	beq.n	80a09b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a09a0:	2b50      	cmp	r3, #80	; 0x50
 80a09a2:	d109      	bne.n	80a09b8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a09a4:	4b09      	ldr	r3, [pc, #36]	; (80a09cc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a09a6:	681b      	ldr	r3, [r3, #0]
 80a09a8:	b13b      	cbz	r3, 80a09ba <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a09aa:	b003      	add	sp, #12
 80a09ac:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a09b0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a09b2:	f7ff ffe5 	bl	80a0980 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a09b6:	e006      	b.n	80a09c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a09b8:	2300      	movs	r3, #0
 80a09ba:	9300      	str	r3, [sp, #0]
 80a09bc:	461a      	mov	r2, r3
 80a09be:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a09c2:	f7ff fdf3 	bl	80a05ac <system_ctrl_set_result>
        break;
    }
}
 80a09c6:	b003      	add	sp, #12
 80a09c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80a09cc:	200000b0 	.word	0x200000b0

080a09d0 <module_user_init_hook>:

void module_user_init_hook()
{
 80a09d0:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a09d2:	4c10      	ldr	r4, [pc, #64]	; (80a0a14 <module_user_init_hook+0x44>)
 80a09d4:	4d10      	ldr	r5, [pc, #64]	; (80a0a18 <module_user_init_hook+0x48>)
 80a09d6:	6823      	ldr	r3, [r4, #0]
 80a09d8:	42ab      	cmp	r3, r5
 80a09da:	4b10      	ldr	r3, [pc, #64]	; (80a0a1c <module_user_init_hook+0x4c>)
 80a09dc:	bf0c      	ite	eq
 80a09de:	2201      	moveq	r2, #1
 80a09e0:	2200      	movne	r2, #0
 80a09e2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a09e4:	d002      	beq.n	80a09ec <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a09e6:	f7ff ffbf 	bl	80a0968 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a09ea:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a09ec:	f7ff fcba 	bl	80a0364 <HAL_RNG_GetRandomNumber>
 80a09f0:	4604      	mov	r4, r0
    srand(seed);
 80a09f2:	f001 fbff 	bl	80a21f4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a09f6:	4b0a      	ldr	r3, [pc, #40]	; (80a0a20 <module_user_init_hook+0x50>)
 80a09f8:	b113      	cbz	r3, 80a0a00 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a09fa:	4620      	mov	r0, r4
 80a09fc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0a00:	2100      	movs	r1, #0
 80a0a02:	4807      	ldr	r0, [pc, #28]	; (80a0a20 <module_user_init_hook+0x50>)
 80a0a04:	f7ff fe44 	bl	80a0690 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0a08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0a0c:	2100      	movs	r1, #0
 80a0a0e:	4805      	ldr	r0, [pc, #20]	; (80a0a24 <module_user_init_hook+0x54>)
 80a0a10:	f7ff bdc2 	b.w	80a0598 <system_ctrl_set_app_request_handler>
 80a0a14:	40024000 	.word	0x40024000
 80a0a18:	9a271c1e 	.word	0x9a271c1e
 80a0a1c:	200000b4 	.word	0x200000b4
 80a0a20:	00000000 	.word	0x00000000
 80a0a24:	080a0999 	.word	0x080a0999

080a0a28 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0a28:	4770      	bx	lr

080a0a2a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a0a2a:	2000      	movs	r0, #0
 80a0a2c:	4770      	bx	lr

080a0a2e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0a2e:	b510      	push	{r4, lr}
 80a0a30:	4604      	mov	r4, r0
 80a0a32:	2110      	movs	r1, #16
 80a0a34:	f000 fe48 	bl	80a16c8 <_ZdlPvj>
 80a0a38:	4620      	mov	r0, r4
 80a0a3a:	bd10      	pop	{r4, pc}

080a0a3c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a0a3c:	b508      	push	{r3, lr}
      { delete this; }
 80a0a3e:	b108      	cbz	r0, 80a0a44 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a0a40:	f7ff fff5 	bl	80a0a2e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a0a44:	bd08      	pop	{r3, pc}

080a0a46 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0a46:	2200      	movs	r2, #0
 80a0a48:	6002      	str	r2, [r0, #0]
 80a0a4a:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a0a4e:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a0a50:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0a52:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a0a56:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0a58:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0a5a:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a0a5c:	680c      	ldr	r4, [r1, #0]
 80a0a5e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0a60:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a0a62:	bd10      	pop	{r4, pc}

080a0a64 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a0a64:	b510      	push	{r4, lr}
 80a0a66:	4604      	mov	r4, r0
    free((void*)msg_);
 80a0a68:	6800      	ldr	r0, [r0, #0]
 80a0a6a:	f7ff fe21 	bl	80a06b0 <free>
}
 80a0a6e:	4620      	mov	r0, r4
 80a0a70:	bd10      	pop	{r4, pc}

080a0a72 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a0a72:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a0a74:	68c4      	ldr	r4, [r0, #12]
 80a0a76:	b1f4      	cbz	r4, 80a0ab6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a0a78:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a0a7a:	2b02      	cmp	r3, #2
 80a0a7c:	d103      	bne.n	80a0a86 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a0a7e:	f104 000c 	add.w	r0, r4, #12
 80a0a82:	f7ff ffef 	bl	80a0a64 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a0a86:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a0a88:	b135      	cbz	r5, 80a0a98 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0a8a:	4628      	mov	r0, r5
 80a0a8c:	f7ff ff03 	bl	80a0896 <_ZNSt14_Function_baseD1Ev>
 80a0a90:	2110      	movs	r1, #16
 80a0a92:	4628      	mov	r0, r5
 80a0a94:	f000 fe18 	bl	80a16c8 <_ZdlPvj>
 80a0a98:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a0a9a:	b135      	cbz	r5, 80a0aaa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a0a9c:	4628      	mov	r0, r5
 80a0a9e:	f7ff fefa 	bl	80a0896 <_ZNSt14_Function_baseD1Ev>
 80a0aa2:	2110      	movs	r1, #16
 80a0aa4:	4628      	mov	r0, r5
 80a0aa6:	f000 fe0f 	bl	80a16c8 <_ZdlPvj>
 80a0aaa:	4620      	mov	r0, r4
 80a0aac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0ab0:	2114      	movs	r1, #20
 80a0ab2:	f000 be09 	b.w	80a16c8 <_ZdlPvj>
 80a0ab6:	bd38      	pop	{r3, r4, r5, pc}

080a0ab8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a0ab8:	b513      	push	{r0, r1, r4, lr}
 80a0aba:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a0abc:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a0ac0:	2300      	movs	r3, #0
 80a0ac2:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0ac4:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0ac6:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a0ac8:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0aca:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a0acc:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0ace:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0ad0:	f7ff feae 	bl	80a0830 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0ad4:	4620      	mov	r0, r4
 80a0ad6:	b002      	add	sp, #8
 80a0ad8:	bd10      	pop	{r4, pc}

080a0ada <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a0ada:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0adc:	460c      	mov	r4, r1
 80a0ade:	4606      	mov	r6, r0
 80a0ae0:	460f      	mov	r7, r1
 80a0ae2:	f854 3b04 	ldr.w	r3, [r4], #4
 80a0ae6:	ad02      	add	r5, sp, #8
 80a0ae8:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a0aec:	4621      	mov	r1, r4
 80a0aee:	a801      	add	r0, sp, #4
 80a0af0:	f7ff feb4 	bl	80a085c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a0af4:	4629      	mov	r1, r5
 80a0af6:	4630      	mov	r0, r6
 80a0af8:	f7ff ffde 	bl	80a0ab8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0afc:	a801      	add	r0, sp, #4
 80a0afe:	f7ff fe97 	bl	80a0830 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0b02:	4620      	mov	r0, r4
 80a0b04:	f7ff fe94 	bl	80a0830 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a0b08:	4638      	mov	r0, r7
 80a0b0a:	2108      	movs	r1, #8
 80a0b0c:	f000 fddc 	bl	80a16c8 <_ZdlPvj>
        return p;
    }
 80a0b10:	4630      	mov	r0, r6
 80a0b12:	b003      	add	sp, #12
 80a0b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a0b18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0b18:	b538      	push	{r3, r4, r5, lr}
 80a0b1a:	2300      	movs	r3, #0
 80a0b1c:	4604      	mov	r4, r0
 80a0b1e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0b20:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0b22:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0b24:	f7ff fab9 	bl	80a009a <_Znwj>
 80a0b28:	b128      	cbz	r0, 80a0b36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a0b2a:	2301      	movs	r3, #1
 80a0b2c:	6043      	str	r3, [r0, #4]
 80a0b2e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a0b30:	4b02      	ldr	r3, [pc, #8]	; (80a0b3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a0b32:	60c5      	str	r5, [r0, #12]
 80a0b34:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0b36:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a0b38:	4620      	mov	r0, r4
 80a0b3a:	bd38      	pop	{r3, r4, r5, pc}
 80a0b3c:	080a23e0 	.word	0x080a23e0

080a0b40 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0b40:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a0b42:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0b44:	b90a      	cbnz	r2, 80a0b4a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a0b46:	f000 fdd2 	bl	80a16ee <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0b4a:	68c3      	ldr	r3, [r0, #12]
    }
 80a0b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0b50:	4718      	bx	r3

080a0b52 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0b52:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0b54:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0b56:	f100 0110 	add.w	r1, r0, #16
 80a0b5a:	f7ff fff1 	bl	80a0b40 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a0b5e:	bd08      	pop	{r3, pc}

080a0b60 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0b60:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a0b62:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0b64:	b90a      	cbnz	r2, 80a0b6a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a0b66:	f000 fdc2 	bl	80a16ee <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0b6a:	68c3      	ldr	r3, [r0, #12]
    }
 80a0b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0b70:	4718      	bx	r3

080a0b72 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0b72:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0b74:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0b76:	f100 0110 	add.w	r1, r0, #16
 80a0b7a:	f7ff fff1 	bl	80a0b60 <_ZNKSt8functionIFvRKbEEclES1_>
 80a0b7e:	bd08      	pop	{r3, pc}

080a0b80 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0b80:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0b82:	2300      	movs	r3, #0
 80a0b84:	6083      	str	r3, [r0, #8]
 80a0b86:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0b88:	4604      	mov	r4, r0
 80a0b8a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a0b8c:	b12b      	cbz	r3, 80a0b9a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0b8e:	2202      	movs	r2, #2
 80a0b90:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0b92:	68eb      	ldr	r3, [r5, #12]
 80a0b94:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0b96:	68ab      	ldr	r3, [r5, #8]
 80a0b98:	60a3      	str	r3, [r4, #8]
	}
    }
 80a0b9a:	4620      	mov	r0, r4
 80a0b9c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0ba0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a0ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0ba2:	b089      	sub	sp, #36	; 0x24
 80a0ba4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a0ba6:	4668      	mov	r0, sp
 80a0ba8:	f7ff ff4d 	bl	80a0a46 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a0bac:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a0bb0:	2300      	movs	r3, #0
 80a0bb2:	f88d 3008 	strb.w	r3, [sp, #8]
 80a0bb6:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a0bba:	2b00      	cmp	r3, #0
 80a0bbc:	d103      	bne.n	80a0bc6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a0bbe:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a0bc2:	2900      	cmp	r1, #0
 80a0bc4:	d1f7      	bne.n	80a0bb6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a0bc6:	d002      	beq.n	80a0bce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a0bc8:	f88d 3008 	strb.w	r3, [sp, #8]
 80a0bcc:	e063      	b.n	80a0c96 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a0bce:	f114 050c 	adds.w	r5, r4, #12
 80a0bd2:	d003      	beq.n	80a0bdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a0bd4:	4669      	mov	r1, sp
 80a0bd6:	4628      	mov	r0, r5
 80a0bd8:	f7ff ff35 	bl	80a0a46 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a0bdc:	f3bf 8f5f 	dmb	sy
 80a0be0:	2301      	movs	r3, #1
 80a0be2:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a0be4:	f3bf 8f5f 	dmb	sy
 80a0be8:	f104 0308 	add.w	r3, r4, #8
 80a0bec:	2000      	movs	r0, #0
 80a0bee:	e853 6f00 	ldrex	r6, [r3]
 80a0bf2:	e843 0200 	strex	r2, r0, [r3]
 80a0bf6:	2a00      	cmp	r2, #0
 80a0bf8:	d1f9      	bne.n	80a0bee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a0bfa:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a0bfe:	2e00      	cmp	r6, #0
 80a0c00:	d049      	beq.n	80a0c96 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a0c02:	f7ff fcb9 	bl	80a0578 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a0c06:	b120      	cbz	r0, 80a0c12 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0c08:	4629      	mov	r1, r5
 80a0c0a:	4630      	mov	r0, r6
 80a0c0c:	f7ff ff98 	bl	80a0b40 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a0c10:	e03a      	b.n	80a0c88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0c12:	4631      	mov	r1, r6
 80a0c14:	a802      	add	r0, sp, #8
 80a0c16:	f7ff ffb3 	bl	80a0b80 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a0c1a:	68e0      	ldr	r0, [r4, #12]
 80a0c1c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a0c20:	b108      	cbz	r0, 80a0c26 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a0c22:	f001 fb0f 	bl	80a2244 <strdup>
 80a0c26:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0c28:	2010      	movs	r0, #16
 80a0c2a:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a0c2e:	f7ff fa34 	bl	80a009a <_Znwj>
 80a0c32:	4605      	mov	r5, r0
 80a0c34:	b1e8      	cbz	r0, 80a0c72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0c36:	2700      	movs	r7, #0
 80a0c38:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0c3a:	2018      	movs	r0, #24
 80a0c3c:	f7ff fa2d 	bl	80a009a <_Znwj>
 80a0c40:	4604      	mov	r4, r0
 80a0c42:	b188      	cbz	r0, 80a0c68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0c44:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0c46:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0c48:	a802      	add	r0, sp, #8
 80a0c4a:	f7ff fe33 	bl	80a08b4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0c4e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a0c50:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0c52:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0c54:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a0c56:	9204      	str	r2, [sp, #16]
 80a0c58:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0c5a:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a0c5c:	60e3      	str	r3, [r4, #12]
 80a0c5e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0c62:	9205      	str	r2, [sp, #20]
 80a0c64:	f7ff feef 	bl	80a0a46 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0c68:	4b0d      	ldr	r3, [pc, #52]	; (80a0ca0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0c6a:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0c6c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0c6e:	4b0d      	ldr	r3, [pc, #52]	; (80a0ca4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a0c70:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a0c72:	a806      	add	r0, sp, #24
 80a0c74:	f7ff fef6 	bl	80a0a64 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0c78:	a802      	add	r0, sp, #8
 80a0c7a:	f7ff fe0c 	bl	80a0896 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0c7e:	2200      	movs	r2, #0
 80a0c80:	4629      	mov	r1, r5
 80a0c82:	4809      	ldr	r0, [pc, #36]	; (80a0ca8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a0c84:	f7ff fc80 	bl	80a0588 <application_thread_invoke>
 80a0c88:	4630      	mov	r0, r6
 80a0c8a:	f7ff fe04 	bl	80a0896 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a0c8e:	2110      	movs	r1, #16
 80a0c90:	4630      	mov	r0, r6
 80a0c92:	f000 fd19 	bl	80a16c8 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a0c96:	4668      	mov	r0, sp
 80a0c98:	f7ff fee4 	bl	80a0a64 <_ZN8particle5ErrorD1Ev>
    }
 80a0c9c:	b009      	add	sp, #36	; 0x24
 80a0c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0ca0:	080a0b53 	.word	0x080a0b53
 80a0ca4:	080a0dc9 	.word	0x080a0dc9
 80a0ca8:	080a1321 	.word	0x080a1321

080a0cac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0cb0:	b08b      	sub	sp, #44	; 0x2c
 80a0cb2:	4606      	mov	r6, r0
 80a0cb4:	460f      	mov	r7, r1
 80a0cb6:	4690      	mov	r8, r2
 80a0cb8:	4699      	mov	r9, r3
 80a0cba:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0cbe:	f7ff fcd7 	bl	80a0670 <spark_cloud_flag_connected>
 80a0cc2:	ad07      	add	r5, sp, #28
    if (!connected()) {
 80a0cc4:	4683      	mov	fp, r0
 80a0cc6:	bb30      	cbnz	r0, 80a0d16 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0cc8:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a0ccc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a0cce:	a905      	add	r1, sp, #20
 80a0cd0:	4628      	mov	r0, r5
 80a0cd2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a0cd6:	f7ff feb6 	bl	80a0a46 <_ZN8particle5ErrorC1EOS0_>
 80a0cda:	2014      	movs	r0, #20
 80a0cdc:	f7ff f9dd 	bl	80a009a <_Znwj>
 80a0ce0:	4604      	mov	r4, r0
 80a0ce2:	b158      	cbz	r0, 80a0cfc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a0ce4:	2302      	movs	r3, #2
 80a0ce6:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0ce8:	2301      	movs	r3, #1
 80a0cea:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a0cec:	f8c0 b004 	str.w	fp, [r0, #4]
 80a0cf0:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a0cf4:	4629      	mov	r1, r5
 80a0cf6:	300c      	adds	r0, #12
 80a0cf8:	f7ff fea5 	bl	80a0a46 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a0cfc:	4630      	mov	r0, r6
 80a0cfe:	4621      	mov	r1, r4
 80a0d00:	f840 4b04 	str.w	r4, [r0], #4
 80a0d04:	f7ff ff08 	bl	80a0b18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a0d08:	4628      	mov	r0, r5
 80a0d0a:	f7ff feab 	bl	80a0a64 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a0d0e:	a805      	add	r0, sp, #20
 80a0d10:	f7ff fea8 	bl	80a0a64 <_ZN8particle5ErrorD1Ev>
 80a0d14:	e052      	b.n	80a0dbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a0d16:	2400      	movs	r4, #0
 80a0d18:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a0d1a:	2014      	movs	r0, #20
 80a0d1c:	606c      	str	r4, [r5, #4]
 80a0d1e:	60ac      	str	r4, [r5, #8]
 80a0d20:	9307      	str	r3, [sp, #28]
 80a0d22:	f7ff f9ba 	bl	80a009a <_Znwj>
 80a0d26:	4601      	mov	r1, r0
 80a0d28:	b118      	cbz	r0, 80a0d32 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a0d2a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0d2c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a0d2e:	6044      	str	r4, [r0, #4]
 80a0d30:	6084      	str	r4, [r0, #8]
 80a0d32:	a804      	add	r0, sp, #16
 80a0d34:	9103      	str	r1, [sp, #12]
 80a0d36:	f7ff feef 	bl	80a0b18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a0d3a:	4b22      	ldr	r3, [pc, #136]	; (80a0dc4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a0d3c:	2008      	movs	r0, #8
 80a0d3e:	9308      	str	r3, [sp, #32]
 80a0d40:	f7ff f9ab 	bl	80a009a <_Znwj>
 80a0d44:	4604      	mov	r4, r0
 80a0d46:	b128      	cbz	r0, 80a0d54 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0d48:	9b03      	ldr	r3, [sp, #12]
 80a0d4a:	a904      	add	r1, sp, #16
 80a0d4c:	f840 3b04 	str.w	r3, [r0], #4
 80a0d50:	f7ff fd84 	bl	80a085c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a0d54:	9500      	str	r5, [sp, #0]
 80a0d56:	fa5f f38a 	uxtb.w	r3, sl
 80a0d5a:	464a      	mov	r2, r9
 80a0d5c:	4641      	mov	r1, r8
 80a0d5e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a0d60:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a0d62:	f7ff fc8d 	bl	80a0680 <spark_send_event>
 80a0d66:	b920      	cbnz	r0, 80a0d72 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a0d68:	9b03      	ldr	r3, [sp, #12]
 80a0d6a:	785b      	ldrb	r3, [r3, #1]
 80a0d6c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a0d70:	b183      	cbz	r3, 80a0d94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a0d72:	9b03      	ldr	r3, [sp, #12]
 80a0d74:	a904      	add	r1, sp, #16
 80a0d76:	a806      	add	r0, sp, #24
 80a0d78:	9305      	str	r3, [sp, #20]
 80a0d7a:	f7ff fd6f 	bl	80a085c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a0d7e:	a905      	add	r1, sp, #20
 80a0d80:	4630      	mov	r0, r6
 80a0d82:	f7ff fe99 	bl	80a0ab8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0d86:	a806      	add	r0, sp, #24
 80a0d88:	f7ff fd52 	bl	80a0830 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0d8c:	a804      	add	r0, sp, #16
 80a0d8e:	f7ff fd4f 	bl	80a0830 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0d92:	e013      	b.n	80a0dbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a0d94:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a0d98:	a905      	add	r1, sp, #20
 80a0d9a:	a803      	add	r0, sp, #12
 80a0d9c:	9205      	str	r2, [sp, #20]
 80a0d9e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a0da2:	f7ff fefd 	bl	80a0ba0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a0da6:	a805      	add	r0, sp, #20
 80a0da8:	f7ff fe5c 	bl	80a0a64 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a0dac:	a805      	add	r0, sp, #20
 80a0dae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0db0:	f7ff fe93 	bl	80a0ada <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a0db4:	a806      	add	r0, sp, #24
 80a0db6:	f7ff fd3b 	bl	80a0830 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0dba:	e7da      	b.n	80a0d72 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
 80a0dbc:	4630      	mov	r0, r6
 80a0dbe:	b00b      	add	sp, #44	; 0x2c
 80a0dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0dc4:	080a0f39 	.word	0x080a0f39

080a0dc8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0dc8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0dca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0dcc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0dce:	d006      	beq.n	80a0dde <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a0dd0:	2a03      	cmp	r2, #3
 80a0dd2:	d017      	beq.n	80a0e04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a0dd4:	2a01      	cmp	r2, #1
 80a0dd6:	d122      	bne.n	80a0e1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0dd8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a0dda:	6003      	str	r3, [r0, #0]
	      break;
 80a0ddc:	e01f      	b.n	80a0e1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0dde:	2018      	movs	r0, #24
 80a0de0:	680e      	ldr	r6, [r1, #0]
 80a0de2:	f7ff f95a 	bl	80a009a <_Znwj>
 80a0de6:	4605      	mov	r5, r0
 80a0de8:	b150      	cbz	r0, 80a0e00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a0dea:	4631      	mov	r1, r6
 80a0dec:	f7ff fec8 	bl	80a0b80 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a0df0:	6930      	ldr	r0, [r6, #16]
 80a0df2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a0df6:	b108      	cbz	r0, 80a0dfc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a0df8:	f001 fa24 	bl	80a2244 <strdup>
 80a0dfc:	6128      	str	r0, [r5, #16]
 80a0dfe:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0e00:	6025      	str	r5, [r4, #0]
 80a0e02:	e00c      	b.n	80a0e1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0e04:	6804      	ldr	r4, [r0, #0]
 80a0e06:	b154      	cbz	r4, 80a0e1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a0e08:	f104 0010 	add.w	r0, r4, #16
 80a0e0c:	f7ff fe2a 	bl	80a0a64 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0e10:	4620      	mov	r0, r4
 80a0e12:	f7ff fd40 	bl	80a0896 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0e16:	2118      	movs	r1, #24
 80a0e18:	4620      	mov	r0, r4
 80a0e1a:	f000 fc55 	bl	80a16c8 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a0e1e:	2000      	movs	r0, #0
 80a0e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0e22 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0e22:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0e24:	2300      	movs	r3, #0
 80a0e26:	6083      	str	r3, [r0, #8]
 80a0e28:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0e2a:	4604      	mov	r4, r0
 80a0e2c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a0e2e:	b12b      	cbz	r3, 80a0e3c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0e30:	2202      	movs	r2, #2
 80a0e32:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0e34:	68eb      	ldr	r3, [r5, #12]
 80a0e36:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0e38:	68ab      	ldr	r3, [r5, #8]
 80a0e3a:	60a3      	str	r3, [r4, #8]
	}
    }
 80a0e3c:	4620      	mov	r0, r4
 80a0e3e:	bd38      	pop	{r3, r4, r5, pc}

080a0e40 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0e40:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0e42:	b570      	push	{r4, r5, r6, lr}
 80a0e44:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0e46:	d006      	beq.n	80a0e56 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a0e48:	2a03      	cmp	r2, #3
 80a0e4a:	d011      	beq.n	80a0e70 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a0e4c:	2a01      	cmp	r2, #1
 80a0e4e:	d118      	bne.n	80a0e82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0e50:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a0e52:	6003      	str	r3, [r0, #0]
	      break;
 80a0e54:	e015      	b.n	80a0e82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0e56:	2014      	movs	r0, #20
 80a0e58:	680e      	ldr	r6, [r1, #0]
 80a0e5a:	f7ff f91e 	bl	80a009a <_Znwj>
 80a0e5e:	4605      	mov	r5, r0
 80a0e60:	b120      	cbz	r0, 80a0e6c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a0e62:	4631      	mov	r1, r6
 80a0e64:	f7ff ffdd 	bl	80a0e22 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a0e68:	7c33      	ldrb	r3, [r6, #16]
 80a0e6a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0e6c:	6025      	str	r5, [r4, #0]
 80a0e6e:	e008      	b.n	80a0e82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0e70:	6804      	ldr	r4, [r0, #0]
 80a0e72:	b134      	cbz	r4, 80a0e82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0e74:	4620      	mov	r0, r4
 80a0e76:	f7ff fd0e 	bl	80a0896 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0e7a:	2114      	movs	r1, #20
 80a0e7c:	4620      	mov	r0, r4
 80a0e7e:	f000 fc23 	bl	80a16c8 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a0e82:	2000      	movs	r0, #0
 80a0e84:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0e88 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a0e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0e8a:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a0e8c:	f3bf 8f5f 	dmb	sy
 80a0e90:	b087      	sub	sp, #28
 80a0e92:	2300      	movs	r3, #0
 80a0e94:	e850 6f00 	ldrex	r6, [r0]
 80a0e98:	e840 3200 	strex	r2, r3, [r0]
 80a0e9c:	2a00      	cmp	r2, #0
 80a0e9e:	d1f9      	bne.n	80a0e94 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a0ea0:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a0ea4:	2e00      	cmp	r6, #0
 80a0ea6:	d03f      	beq.n	80a0f28 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a0ea8:	4618      	mov	r0, r3
 80a0eaa:	f7ff fb65 	bl	80a0578 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a0eae:	4607      	mov	r7, r0
 80a0eb0:	b120      	cbz	r0, 80a0ebc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0eb2:	4621      	mov	r1, r4
 80a0eb4:	4630      	mov	r0, r6
 80a0eb6:	f7ff fe53 	bl	80a0b60 <_ZNKSt8functionIFvRKbEEclES1_>
 80a0eba:	e02e      	b.n	80a0f1a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0ebc:	4631      	mov	r1, r6
 80a0ebe:	a801      	add	r0, sp, #4
 80a0ec0:	f7ff ffaf 	bl	80a0e22 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0ec4:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0ec6:	2010      	movs	r0, #16
 80a0ec8:	f88d 3014 	strb.w	r3, [sp, #20]
 80a0ecc:	f7ff f8e5 	bl	80a009a <_Znwj>
 80a0ed0:	4605      	mov	r5, r0
 80a0ed2:	b1d0      	cbz	r0, 80a0f0a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0ed4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0ed6:	2014      	movs	r0, #20
 80a0ed8:	f7ff f8df 	bl	80a009a <_Znwj>
 80a0edc:	4604      	mov	r4, r0
 80a0ede:	b178      	cbz	r0, 80a0f00 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0ee0:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0ee2:	4601      	mov	r1, r0
 80a0ee4:	a801      	add	r0, sp, #4
 80a0ee6:	f7ff fce5 	bl	80a08b4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0eea:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a0eec:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0eee:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0ef0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a0ef2:	9203      	str	r2, [sp, #12]
 80a0ef4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0ef6:	60e3      	str	r3, [r4, #12]
 80a0ef8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0efc:	9204      	str	r2, [sp, #16]
 80a0efe:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0f00:	4b0a      	ldr	r3, [pc, #40]	; (80a0f2c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0f02:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0f04:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0f06:	4b0a      	ldr	r3, [pc, #40]	; (80a0f30 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a0f08:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0f0a:	a801      	add	r0, sp, #4
 80a0f0c:	f7ff fcc3 	bl	80a0896 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0f10:	2200      	movs	r2, #0
 80a0f12:	4629      	mov	r1, r5
 80a0f14:	4807      	ldr	r0, [pc, #28]	; (80a0f34 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a0f16:	f7ff fb37 	bl	80a0588 <application_thread_invoke>
 80a0f1a:	4630      	mov	r0, r6
 80a0f1c:	f7ff fcbb 	bl	80a0896 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a0f20:	2110      	movs	r1, #16
 80a0f22:	4630      	mov	r0, r6
 80a0f24:	f000 fbd0 	bl	80a16c8 <_ZdlPvj>
        }
    }
 80a0f28:	b007      	add	sp, #28
 80a0f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0f2c:	080a0b73 	.word	0x080a0b73
 80a0f30:	080a0e41 	.word	0x080a0e41
 80a0f34:	080a1321 	.word	0x080a1321

080a0f38 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a0f38:	b530      	push	{r4, r5, lr}
 80a0f3a:	4604      	mov	r4, r0
 80a0f3c:	b085      	sub	sp, #20
 80a0f3e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a0f40:	4668      	mov	r0, sp
 80a0f42:	4611      	mov	r1, r2
 80a0f44:	f7ff fdc9 	bl	80a0ada <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a0f48:	b17c      	cbz	r4, 80a0f6a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a0f4a:	b224      	sxth	r4, r4
 80a0f4c:	4628      	mov	r0, r5
 80a0f4e:	b10d      	cbz	r5, 80a0f54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a0f50:	f001 f978 	bl	80a2244 <strdup>
 80a0f54:	9002      	str	r0, [sp, #8]
 80a0f56:	a902      	add	r1, sp, #8
 80a0f58:	4668      	mov	r0, sp
 80a0f5a:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a0f5e:	f7ff fe1f 	bl	80a0ba0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a0f62:	a802      	add	r0, sp, #8
 80a0f64:	f7ff fd7e 	bl	80a0a64 <_ZN8particle5ErrorD1Ev>
 80a0f68:	e01d      	b.n	80a0fa6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a0f6a:	f04f 0201 	mov.w	r2, #1
 80a0f6e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a0f70:	f88d 4008 	strb.w	r4, [sp, #8]
 80a0f74:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a0f78:	42a3      	cmp	r3, r4
 80a0f7a:	d103      	bne.n	80a0f84 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a0f7c:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a0f80:	2900      	cmp	r1, #0
 80a0f82:	d1f7      	bne.n	80a0f74 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a0f84:	d002      	beq.n	80a0f8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a0f86:	f88d 3008 	strb.w	r3, [sp, #8]
 80a0f8a:	e00c      	b.n	80a0fa6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a0f8c:	f110 010c 	adds.w	r1, r0, #12
 80a0f90:	f04f 0301 	mov.w	r3, #1
 80a0f94:	bf18      	it	ne
 80a0f96:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a0f98:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a0f9c:	3004      	adds	r0, #4
 80a0f9e:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a0fa2:	f7ff ff71 	bl	80a0e88 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a0fa6:	a801      	add	r0, sp, #4
 80a0fa8:	f7ff fc42 	bl	80a0830 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a0fac:	b005      	add	sp, #20
 80a0fae:	bd30      	pop	{r4, r5, pc}

080a0fb0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0fb0:	4770      	bx	lr

080a0fb2 <_ZN9IPAddressD0Ev>:
 80a0fb2:	b510      	push	{r4, lr}
 80a0fb4:	4604      	mov	r4, r0
 80a0fb6:	2118      	movs	r1, #24
 80a0fb8:	f000 fb86 	bl	80a16c8 <_ZdlPvj>
 80a0fbc:	4620      	mov	r0, r4
 80a0fbe:	bd10      	pop	{r4, pc}

080a0fc0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0fc2:	460f      	mov	r7, r1
 80a0fc4:	f100 0608 	add.w	r6, r0, #8
 80a0fc8:	1d05      	adds	r5, r0, #4
 80a0fca:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a0fcc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0fd0:	220a      	movs	r2, #10
 80a0fd2:	4638      	mov	r0, r7
 80a0fd4:	f7ff fc07 	bl	80a07e6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0fd8:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0fda:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0fdc:	d007      	beq.n	80a0fee <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0fde:	2c00      	cmp	r4, #0
 80a0fe0:	d0f4      	beq.n	80a0fcc <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0fe2:	212e      	movs	r1, #46	; 0x2e
 80a0fe4:	4638      	mov	r0, r7
 80a0fe6:	f7ff fbe5 	bl	80a07b4 <_ZN5Print5printEc>
 80a0fea:	4404      	add	r4, r0
 80a0fec:	e7ee      	b.n	80a0fcc <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0fee:	4620      	mov	r0, r4
 80a0ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0ff4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0ff4:	b510      	push	{r4, lr}
 80a0ff6:	4604      	mov	r4, r0
 80a0ff8:	4b04      	ldr	r3, [pc, #16]	; (80a100c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0ffa:	2211      	movs	r2, #17
 80a0ffc:	f840 3b04 	str.w	r3, [r0], #4
 80a1000:	2100      	movs	r1, #0
 80a1002:	f001 f8ee 	bl	80a21e2 <memset>
{
    clear();
}
 80a1006:	4620      	mov	r0, r4
 80a1008:	bd10      	pop	{r4, pc}
 80a100a:	bf00      	nop
 80a100c:	080a23fc 	.word	0x080a23fc

080a1010 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1010:	4603      	mov	r3, r0
 80a1012:	4a07      	ldr	r2, [pc, #28]	; (80a1030 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1014:	b510      	push	{r4, lr}
 80a1016:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a101a:	f101 0210 	add.w	r2, r1, #16
 80a101e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1022:	4291      	cmp	r1, r2
 80a1024:	f843 4b04 	str.w	r4, [r3], #4
 80a1028:	d1f9      	bne.n	80a101e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a102a:	780a      	ldrb	r2, [r1, #0]
 80a102c:	701a      	strb	r2, [r3, #0]
}
 80a102e:	bd10      	pop	{r4, pc}
 80a1030:	080a23fc 	.word	0x080a23fc

080a1034 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1034:	4a02      	ldr	r2, [pc, #8]	; (80a1040 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a1036:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1038:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a103a:	2204      	movs	r2, #4
 80a103c:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a103e:	4770      	bx	lr
 80a1040:	080a23fc 	.word	0x080a23fc

080a1044 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1044:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1046:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a104a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a104e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a1052:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a1056:	2304      	movs	r3, #4
 80a1058:	6041      	str	r1, [r0, #4]
 80a105a:	7503      	strb	r3, [r0, #20]
 80a105c:	bd10      	pop	{r4, pc}
	...

080a1060 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1060:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1062:	4d04      	ldr	r5, [pc, #16]	; (80a1074 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1064:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1066:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a106a:	9500      	str	r5, [sp, #0]
 80a106c:	f7ff ffea 	bl	80a1044 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1070:	b003      	add	sp, #12
 80a1072:	bd30      	pop	{r4, r5, pc}
 80a1074:	080a23fc 	.word	0x080a23fc

080a1078 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1078:	7441      	strb	r1, [r0, #17]
 80a107a:	4770      	bx	lr

080a107c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a107c:	4770      	bx	lr

080a107e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a107e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1080:	2100      	movs	r1, #0
 80a1082:	7c00      	ldrb	r0, [r0, #16]
 80a1084:	f7ff fa48 	bl	80a0518 <HAL_USB_USART_Receive_Data>
}
 80a1088:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a108c:	bf28      	it	cs
 80a108e:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1092:	bd08      	pop	{r3, pc}

080a1094 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a1094:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1096:	2101      	movs	r1, #1
 80a1098:	7c00      	ldrb	r0, [r0, #16]
 80a109a:	f7ff fa3d 	bl	80a0518 <HAL_USB_USART_Receive_Data>
}
 80a109e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a10a2:	bf28      	it	cs
 80a10a4:	f04f 30ff 	movcs.w	r0, #4294967295
 80a10a8:	bd08      	pop	{r3, pc}

080a10aa <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a10aa:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a10ac:	7c00      	ldrb	r0, [r0, #16]
 80a10ae:	f7ff fa2b 	bl	80a0508 <HAL_USB_USART_Available_Data_For_Write>
}
 80a10b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a10b6:	bd08      	pop	{r3, pc}

080a10b8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a10b8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a10ba:	7c00      	ldrb	r0, [r0, #16]
 80a10bc:	f7ff fa1c 	bl	80a04f8 <HAL_USB_USART_Available_Data>
}
 80a10c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a10c4:	bd08      	pop	{r3, pc}

080a10c6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a10c6:	7c00      	ldrb	r0, [r0, #16]
 80a10c8:	f7ff ba36 	b.w	80a0538 <HAL_USB_USART_Flush_Data>

080a10cc <_ZN9USBSerialD0Ev>:
 80a10cc:	b510      	push	{r4, lr}
 80a10ce:	4604      	mov	r4, r0
 80a10d0:	2114      	movs	r1, #20
 80a10d2:	f000 faf9 	bl	80a16c8 <_ZdlPvj>
 80a10d6:	4620      	mov	r0, r4
 80a10d8:	bd10      	pop	{r4, pc}

080a10da <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a10da:	b538      	push	{r3, r4, r5, lr}
 80a10dc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a10de:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a10e0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a10e2:	f7ff fa11 	bl	80a0508 <HAL_USB_USART_Available_Data_For_Write>
 80a10e6:	2800      	cmp	r0, #0
 80a10e8:	dc01      	bgt.n	80a10ee <_ZN9USBSerial5writeEh+0x14>
 80a10ea:	7c60      	ldrb	r0, [r4, #17]
 80a10ec:	b128      	cbz	r0, 80a10fa <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a10ee:	4629      	mov	r1, r5
 80a10f0:	7c20      	ldrb	r0, [r4, #16]
 80a10f2:	f7ff fa19 	bl	80a0528 <HAL_USB_USART_Send_Data>
 80a10f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a10fa:	bd38      	pop	{r3, r4, r5, pc}

080a10fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a10fc:	b510      	push	{r4, lr}
 80a10fe:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1100:	2300      	movs	r3, #0
 80a1102:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1104:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1108:	60a3      	str	r3, [r4, #8]
 80a110a:	4b05      	ldr	r3, [pc, #20]	; (80a1120 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a110c:	4608      	mov	r0, r1
 80a110e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1110:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1112:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1114:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1116:	4611      	mov	r1, r2
 80a1118:	f7ff f9de 	bl	80a04d8 <HAL_USB_USART_Init>
}
 80a111c:	4620      	mov	r0, r4
 80a111e:	bd10      	pop	{r4, pc}
 80a1120:	080a2410 	.word	0x080a2410

080a1124 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1124:	2200      	movs	r2, #0
 80a1126:	7c00      	ldrb	r0, [r0, #16]
 80a1128:	f7ff b9de 	b.w	80a04e8 <HAL_USB_USART_Begin>

080a112c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a112c:	b510      	push	{r4, lr}
 80a112e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1130:	2214      	movs	r2, #20
 80a1132:	2100      	movs	r1, #0
 80a1134:	f001 f855 	bl	80a21e2 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1138:	4b05      	ldr	r3, [pc, #20]	; (80a1150 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a113a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a113c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a113e:	4b05      	ldr	r3, [pc, #20]	; (80a1154 <_Z19acquireSerialBufferv+0x28>)
 80a1140:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1142:	f240 1301 	movw	r3, #257	; 0x101
 80a1146:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1148:	2381      	movs	r3, #129	; 0x81
 80a114a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a114c:	bd10      	pop	{r4, pc}
 80a114e:	bf00      	nop
 80a1150:	2000013d 	.word	0x2000013d
 80a1154:	200000bc 	.word	0x200000bc

080a1158 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1158:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a115a:	4d0e      	ldr	r5, [pc, #56]	; (80a1194 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a115c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a115e:	a801      	add	r0, sp, #4
 80a1160:	f7ff ffe4 	bl	80a112c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1164:	6829      	ldr	r1, [r5, #0]
 80a1166:	f011 0401 	ands.w	r4, r1, #1
 80a116a:	d110      	bne.n	80a118e <_Z16_fetch_usbserialv+0x36>
 80a116c:	4628      	mov	r0, r5
 80a116e:	f7fe ff98 	bl	80a00a2 <__cxa_guard_acquire>
 80a1172:	b160      	cbz	r0, 80a118e <_Z16_fetch_usbserialv+0x36>
 80a1174:	aa01      	add	r2, sp, #4
 80a1176:	4621      	mov	r1, r4
 80a1178:	4807      	ldr	r0, [pc, #28]	; (80a1198 <_Z16_fetch_usbserialv+0x40>)
 80a117a:	f7ff ffbf 	bl	80a10fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a117e:	4628      	mov	r0, r5
 80a1180:	f7fe ff94 	bl	80a00ac <__cxa_guard_release>
 80a1184:	4a05      	ldr	r2, [pc, #20]	; (80a119c <_Z16_fetch_usbserialv+0x44>)
 80a1186:	4906      	ldr	r1, [pc, #24]	; (80a11a0 <_Z16_fetch_usbserialv+0x48>)
 80a1188:	4803      	ldr	r0, [pc, #12]	; (80a1198 <_Z16_fetch_usbserialv+0x40>)
 80a118a:	f000 fa8f 	bl	80a16ac <__aeabi_atexit>
	return _usbserial;
}
 80a118e:	4802      	ldr	r0, [pc, #8]	; (80a1198 <_Z16_fetch_usbserialv+0x40>)
 80a1190:	b007      	add	sp, #28
 80a1192:	bd30      	pop	{r4, r5, pc}
 80a1194:	200000b8 	.word	0x200000b8
 80a1198:	20000240 	.word	0x20000240
 80a119c:	20000068 	.word	0x20000068
 80a11a0:	080a107d 	.word	0x080a107d

080a11a4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a11a4:	b510      	push	{r4, lr}
 80a11a6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a11a8:	2214      	movs	r2, #20
 80a11aa:	2100      	movs	r1, #0
 80a11ac:	f001 f819 	bl	80a21e2 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a11b0:	4b05      	ldr	r3, [pc, #20]	; (80a11c8 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a11b2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a11b4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a11b6:	4b05      	ldr	r3, [pc, #20]	; (80a11cc <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a11b8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a11ba:	f240 1301 	movw	r3, #257	; 0x101
 80a11be:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a11c0:	2381      	movs	r3, #129	; 0x81
 80a11c2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a11c4:	bd10      	pop	{r4, pc}
 80a11c6:	bf00      	nop
 80a11c8:	200002f0 	.word	0x200002f0
 80a11cc:	20000258 	.word	0x20000258

080a11d0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a11d0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a11d2:	4c0e      	ldr	r4, [pc, #56]	; (80a120c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a11d4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a11d6:	a801      	add	r0, sp, #4
 80a11d8:	f7ff ffe4 	bl	80a11a4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a11dc:	6823      	ldr	r3, [r4, #0]
 80a11de:	07db      	lsls	r3, r3, #31
 80a11e0:	d410      	bmi.n	80a1204 <_Z17_fetch_usbserial1v+0x34>
 80a11e2:	4620      	mov	r0, r4
 80a11e4:	f7fe ff5d 	bl	80a00a2 <__cxa_guard_acquire>
 80a11e8:	b160      	cbz	r0, 80a1204 <_Z17_fetch_usbserial1v+0x34>
 80a11ea:	aa01      	add	r2, sp, #4
 80a11ec:	2101      	movs	r1, #1
 80a11ee:	4808      	ldr	r0, [pc, #32]	; (80a1210 <_Z17_fetch_usbserial1v+0x40>)
 80a11f0:	f7ff ff84 	bl	80a10fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a11f4:	4620      	mov	r0, r4
 80a11f6:	f7fe ff59 	bl	80a00ac <__cxa_guard_release>
 80a11fa:	4a06      	ldr	r2, [pc, #24]	; (80a1214 <_Z17_fetch_usbserial1v+0x44>)
 80a11fc:	4906      	ldr	r1, [pc, #24]	; (80a1218 <_Z17_fetch_usbserial1v+0x48>)
 80a11fe:	4804      	ldr	r0, [pc, #16]	; (80a1210 <_Z17_fetch_usbserial1v+0x40>)
 80a1200:	f000 fa54 	bl	80a16ac <__aeabi_atexit>
  return _usbserial1;
}
 80a1204:	4802      	ldr	r0, [pc, #8]	; (80a1210 <_Z17_fetch_usbserial1v+0x40>)
 80a1206:	b006      	add	sp, #24
 80a1208:	bd10      	pop	{r4, pc}
 80a120a:	bf00      	nop
 80a120c:	20000254 	.word	0x20000254
 80a1210:	200002dc 	.word	0x200002dc
 80a1214:	20000068 	.word	0x20000068
 80a1218:	080a107d 	.word	0x080a107d

080a121c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a121c:	4770      	bx	lr

080a121e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a121e:	7441      	strb	r1, [r0, #17]
 80a1220:	4770      	bx	lr

080a1222 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a1222:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a1224:	7c00      	ldrb	r0, [r0, #16]
 80a1226:	f7ff f915 	bl	80a0454 <HAL_USART_Available_Data_For_Write>
}
 80a122a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a122e:	bd08      	pop	{r3, pc}

080a1230 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1230:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a1232:	7c00      	ldrb	r0, [r0, #16]
 80a1234:	f7ff f8e6 	bl	80a0404 <HAL_USART_Available_Data>
}
 80a1238:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a123c:	bd08      	pop	{r3, pc}

080a123e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a123e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a1240:	7c00      	ldrb	r0, [r0, #16]
 80a1242:	f7ff f8ef 	bl	80a0424 <HAL_USART_Peek_Data>
}
 80a1246:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a124a:	bf28      	it	cs
 80a124c:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1250:	bd08      	pop	{r3, pc}

080a1252 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1252:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a1254:	7c00      	ldrb	r0, [r0, #16]
 80a1256:	f7ff f8dd 	bl	80a0414 <HAL_USART_Read_Data>
}
 80a125a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a125e:	bf28      	it	cs
 80a1260:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1264:	bd08      	pop	{r3, pc}

080a1266 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1266:	7c00      	ldrb	r0, [r0, #16]
 80a1268:	f7ff b8e4 	b.w	80a0434 <HAL_USART_Flush_Data>

080a126c <_ZN11USARTSerialD0Ev>:
 80a126c:	b510      	push	{r4, lr}
 80a126e:	4604      	mov	r4, r0
 80a1270:	2114      	movs	r1, #20
 80a1272:	f000 fa29 	bl	80a16c8 <_ZdlPvj>
 80a1276:	4620      	mov	r0, r4
 80a1278:	bd10      	pop	{r4, pc}

080a127a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a127a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a127c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a127e:	4604      	mov	r4, r0
 80a1280:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1282:	b925      	cbnz	r5, 80a128e <_ZN11USARTSerial5writeEh+0x14>
 80a1284:	7c00      	ldrb	r0, [r0, #16]
 80a1286:	f7ff f8e5 	bl	80a0454 <HAL_USART_Available_Data_For_Write>
 80a128a:	2800      	cmp	r0, #0
 80a128c:	dd05      	ble.n	80a129a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a128e:	4631      	mov	r1, r6
 80a1290:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1292:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1296:	f7ff b8ad 	b.w	80a03f4 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a129a:	4628      	mov	r0, r5
 80a129c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a12a0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a12a0:	b510      	push	{r4, lr}
 80a12a2:	4604      	mov	r4, r0
 80a12a4:	4608      	mov	r0, r1
 80a12a6:	4611      	mov	r1, r2
 80a12a8:	2200      	movs	r2, #0
 80a12aa:	6062      	str	r2, [r4, #4]
 80a12ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a12b0:	60a2      	str	r2, [r4, #8]
 80a12b2:	4a05      	ldr	r2, [pc, #20]	; (80a12c8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a12b4:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a12b6:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a12b8:	2201      	movs	r2, #1
 80a12ba:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a12bc:	461a      	mov	r2, r3
 80a12be:	f7ff f891 	bl	80a03e4 <HAL_USART_Init>
}
 80a12c2:	4620      	mov	r0, r4
 80a12c4:	bd10      	pop	{r4, pc}
 80a12c6:	bf00      	nop
 80a12c8:	080a2440 	.word	0x080a2440

080a12cc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a12cc:	7c00      	ldrb	r0, [r0, #16]
 80a12ce:	f7ff b8b9 	b.w	80a0444 <HAL_USART_Is_Enabled>
	...

080a12d4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a12d4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a12d6:	4d0c      	ldr	r5, [pc, #48]	; (80a1308 <_Z22__fetch_global_Serial1v+0x34>)
 80a12d8:	6829      	ldr	r1, [r5, #0]
 80a12da:	f011 0401 	ands.w	r4, r1, #1
 80a12de:	d111      	bne.n	80a1304 <_Z22__fetch_global_Serial1v+0x30>
 80a12e0:	4628      	mov	r0, r5
 80a12e2:	f7fe fede 	bl	80a00a2 <__cxa_guard_acquire>
 80a12e6:	b168      	cbz	r0, 80a1304 <_Z22__fetch_global_Serial1v+0x30>
 80a12e8:	4a08      	ldr	r2, [pc, #32]	; (80a130c <_Z22__fetch_global_Serial1v+0x38>)
 80a12ea:	4621      	mov	r1, r4
 80a12ec:	4b08      	ldr	r3, [pc, #32]	; (80a1310 <_Z22__fetch_global_Serial1v+0x3c>)
 80a12ee:	4809      	ldr	r0, [pc, #36]	; (80a1314 <_Z22__fetch_global_Serial1v+0x40>)
 80a12f0:	f7ff ffd6 	bl	80a12a0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a12f4:	4628      	mov	r0, r5
 80a12f6:	f7fe fed9 	bl	80a00ac <__cxa_guard_release>
 80a12fa:	4a07      	ldr	r2, [pc, #28]	; (80a1318 <_Z22__fetch_global_Serial1v+0x44>)
 80a12fc:	4907      	ldr	r1, [pc, #28]	; (80a131c <_Z22__fetch_global_Serial1v+0x48>)
 80a12fe:	4805      	ldr	r0, [pc, #20]	; (80a1314 <_Z22__fetch_global_Serial1v+0x40>)
 80a1300:	f000 f9d4 	bl	80a16ac <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1304:	4803      	ldr	r0, [pc, #12]	; (80a1314 <_Z22__fetch_global_Serial1v+0x40>)
 80a1306:	bd38      	pop	{r3, r4, r5, pc}
 80a1308:	2000048c 	.word	0x2000048c
 80a130c:	20000490 	.word	0x20000490
 80a1310:	20000408 	.word	0x20000408
 80a1314:	200003f4 	.word	0x200003f4
 80a1318:	20000068 	.word	0x20000068
 80a131c:	080a121d 	.word	0x080a121d

080a1320 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a1320:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1322:	6883      	ldr	r3, [r0, #8]
 80a1324:	4604      	mov	r4, r0
 80a1326:	b90b      	cbnz	r3, 80a132c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a1328:	f000 f9e1 	bl	80a16ee <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a132c:	68c3      	ldr	r3, [r0, #12]
 80a132e:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a1330:	68a3      	ldr	r3, [r4, #8]
 80a1332:	b11b      	cbz	r3, 80a133c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1334:	2203      	movs	r2, #3
 80a1336:	4621      	mov	r1, r4
 80a1338:	4620      	mov	r0, r4
 80a133a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a133c:	4620      	mov	r0, r4
}
 80a133e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1342:	2110      	movs	r1, #16
 80a1344:	f000 b9c0 	b.w	80a16c8 <_ZdlPvj>

080a1348 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a1348:	4770      	bx	lr

080a134a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a134a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a134c:	4606      	mov	r6, r0
 80a134e:	4615      	mov	r5, r2
 80a1350:	460c      	mov	r4, r1
 80a1352:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1354:	42bc      	cmp	r4, r7
 80a1356:	d006      	beq.n	80a1366 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1358:	6833      	ldr	r3, [r6, #0]
 80a135a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a135e:	689b      	ldr	r3, [r3, #8]
 80a1360:	4630      	mov	r0, r6
 80a1362:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1364:	e7f6      	b.n	80a1354 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a1366:	4628      	mov	r0, r5
 80a1368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a136a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a136a:	2200      	movs	r2, #0
 80a136c:	7c00      	ldrb	r0, [r0, #16]
 80a136e:	f7ff b879 	b.w	80a0464 <HAL_I2C_Write_Data>

080a1372 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1372:	2100      	movs	r1, #0
 80a1374:	7c00      	ldrb	r0, [r0, #16]
 80a1376:	f7ff b87d 	b.w	80a0474 <HAL_I2C_Available_Data>

080a137a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a137a:	2100      	movs	r1, #0
 80a137c:	7c00      	ldrb	r0, [r0, #16]
 80a137e:	f7ff b881 	b.w	80a0484 <HAL_I2C_Read_Data>

080a1382 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1382:	2100      	movs	r1, #0
 80a1384:	7c00      	ldrb	r0, [r0, #16]
 80a1386:	f7ff b885 	b.w	80a0494 <HAL_I2C_Peek_Data>

080a138a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a138a:	2100      	movs	r1, #0
 80a138c:	7c00      	ldrb	r0, [r0, #16]
 80a138e:	f7ff b889 	b.w	80a04a4 <HAL_I2C_Flush_Data>

080a1392 <_ZN7TwoWireD0Ev>:
 80a1392:	b510      	push	{r4, lr}
 80a1394:	4604      	mov	r4, r0
 80a1396:	2114      	movs	r1, #20
 80a1398:	f000 f996 	bl	80a16c8 <_ZdlPvj>
 80a139c:	4620      	mov	r0, r4
 80a139e:	bd10      	pop	{r4, pc}

080a13a0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a13a0:	b510      	push	{r4, lr}
 80a13a2:	4604      	mov	r4, r0
 80a13a4:	2300      	movs	r3, #0
 80a13a6:	6063      	str	r3, [r4, #4]
 80a13a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a13ac:	60a3      	str	r3, [r4, #8]
 80a13ae:	4b04      	ldr	r3, [pc, #16]	; (80a13c0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a13b0:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a13b2:	4608      	mov	r0, r1
 80a13b4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a13b6:	4611      	mov	r1, r2
 80a13b8:	f7ff f884 	bl	80a04c4 <HAL_I2C_Init>
}
 80a13bc:	4620      	mov	r0, r4
 80a13be:	bd10      	pop	{r4, pc}
 80a13c0:	080a2470 	.word	0x080a2470

080a13c4 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a13c4:	2100      	movs	r1, #0
 80a13c6:	7c00      	ldrb	r0, [r0, #16]
 80a13c8:	f7ff b874 	b.w	80a04b4 <HAL_I2C_Is_Enabled>

080a13cc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a13cc:	2200      	movs	r2, #0
 80a13ce:	4611      	mov	r1, r2
 80a13d0:	6840      	ldr	r0, [r0, #4]
 80a13d2:	f7ff b90d 	b.w	80a05f0 <network_ready>

080a13d6 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a13d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a13d8:	4616      	mov	r6, r2
 80a13da:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a13dc:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a13de:	460f      	mov	r7, r1
 80a13e0:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a13e2:	2100      	movs	r1, #0
 80a13e4:	a803      	add	r0, sp, #12
 80a13e6:	f000 fefc 	bl	80a21e2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a13ea:	4630      	mov	r0, r6
 80a13ec:	f000 ff45 	bl	80a227a <strlen>
 80a13f0:	2500      	movs	r5, #0
 80a13f2:	9500      	str	r5, [sp, #0]
 80a13f4:	b281      	uxth	r1, r0
 80a13f6:	687b      	ldr	r3, [r7, #4]
 80a13f8:	aa03      	add	r2, sp, #12
 80a13fa:	4630      	mov	r0, r6
 80a13fc:	f7ff f8a4 	bl	80a0548 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1400:	b120      	cbz	r0, 80a140c <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a1402:	4629      	mov	r1, r5
 80a1404:	4620      	mov	r0, r4
 80a1406:	f7ff fe15 	bl	80a1034 <_ZN9IPAddressC1Em>
 80a140a:	e003      	b.n	80a1414 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a140c:	a903      	add	r1, sp, #12
 80a140e:	4620      	mov	r0, r4
 80a1410:	f7ff fdfe 	bl	80a1010 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a1414:	4620      	mov	r0, r4
 80a1416:	b009      	add	sp, #36	; 0x24
 80a1418:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a141a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a141a:	2200      	movs	r2, #0
 80a141c:	4611      	mov	r1, r2
 80a141e:	6840      	ldr	r0, [r0, #4]
 80a1420:	f7ff b906 	b.w	80a0630 <network_listening>

080a1424 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a1424:	2200      	movs	r2, #0
 80a1426:	4611      	mov	r1, r2
 80a1428:	6840      	ldr	r0, [r0, #4]
 80a142a:	f7ff b911 	b.w	80a0650 <network_get_listen_timeout>

080a142e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a142e:	2200      	movs	r2, #0
 80a1430:	6840      	ldr	r0, [r0, #4]
 80a1432:	f7ff b905 	b.w	80a0640 <network_set_listen_timeout>

080a1436 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1436:	2200      	movs	r2, #0
 80a1438:	f081 0101 	eor.w	r1, r1, #1
 80a143c:	6840      	ldr	r0, [r0, #4]
 80a143e:	f7ff b8ef 	b.w	80a0620 <network_listen>

080a1442 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a1442:	2300      	movs	r3, #0
 80a1444:	461a      	mov	r2, r3
 80a1446:	4619      	mov	r1, r3
 80a1448:	6840      	ldr	r0, [r0, #4]
 80a144a:	f7ff b8e1 	b.w	80a0610 <network_off>

080a144e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a144e:	2200      	movs	r2, #0
 80a1450:	4611      	mov	r1, r2
 80a1452:	6840      	ldr	r0, [r0, #4]
 80a1454:	f7ff b8bc 	b.w	80a05d0 <network_connecting>

080a1458 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1458:	2200      	movs	r2, #0
 80a145a:	2102      	movs	r1, #2
 80a145c:	6840      	ldr	r0, [r0, #4]
 80a145e:	f7ff b8bf 	b.w	80a05e0 <network_disconnect>

080a1462 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a1462:	2300      	movs	r3, #0
 80a1464:	461a      	mov	r2, r3
 80a1466:	6840      	ldr	r0, [r0, #4]
 80a1468:	f7ff b8aa 	b.w	80a05c0 <network_connect>

080a146c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a146c:	4b02      	ldr	r3, [pc, #8]	; (80a1478 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a146e:	2204      	movs	r2, #4
 80a1470:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1472:	4a02      	ldr	r2, [pc, #8]	; (80a147c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1474:	601a      	str	r2, [r3, #0]
 80a1476:	4770      	bx	lr
 80a1478:	20000514 	.word	0x20000514
 80a147c:	080a2498 	.word	0x080a2498

080a1480 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1480:	2300      	movs	r3, #0
 80a1482:	461a      	mov	r2, r3
 80a1484:	6840      	ldr	r0, [r0, #4]
 80a1486:	f7ff b89b 	b.w	80a05c0 <network_connect>

080a148a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a148a:	2200      	movs	r2, #0
 80a148c:	2102      	movs	r1, #2
 80a148e:	6840      	ldr	r0, [r0, #4]
 80a1490:	f7ff b8a6 	b.w	80a05e0 <network_disconnect>

080a1494 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1494:	2200      	movs	r2, #0
 80a1496:	4611      	mov	r1, r2
 80a1498:	6840      	ldr	r0, [r0, #4]
 80a149a:	f7ff b899 	b.w	80a05d0 <network_connecting>

080a149e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a149e:	2200      	movs	r2, #0
 80a14a0:	4611      	mov	r1, r2
 80a14a2:	6840      	ldr	r0, [r0, #4]
 80a14a4:	f7ff b8a4 	b.w	80a05f0 <network_ready>

080a14a8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a14a8:	2300      	movs	r3, #0
 80a14aa:	461a      	mov	r2, r3
 80a14ac:	4619      	mov	r1, r3
 80a14ae:	6840      	ldr	r0, [r0, #4]
 80a14b0:	f7ff b8a6 	b.w	80a0600 <network_on>

080a14b4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a14b4:	2300      	movs	r3, #0
 80a14b6:	461a      	mov	r2, r3
 80a14b8:	4619      	mov	r1, r3
 80a14ba:	6840      	ldr	r0, [r0, #4]
 80a14bc:	f7ff b8a8 	b.w	80a0610 <network_off>

080a14c0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a14c0:	2200      	movs	r2, #0
 80a14c2:	f081 0101 	eor.w	r1, r1, #1
 80a14c6:	6840      	ldr	r0, [r0, #4]
 80a14c8:	f7ff b8aa 	b.w	80a0620 <network_listen>

080a14cc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a14cc:	2200      	movs	r2, #0
 80a14ce:	6840      	ldr	r0, [r0, #4]
 80a14d0:	f7ff b8b6 	b.w	80a0640 <network_set_listen_timeout>

080a14d4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a14d4:	2200      	movs	r2, #0
 80a14d6:	4611      	mov	r1, r2
 80a14d8:	6840      	ldr	r0, [r0, #4]
 80a14da:	f7ff b8b9 	b.w	80a0650 <network_get_listen_timeout>

080a14de <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a14de:	2200      	movs	r2, #0
 80a14e0:	4611      	mov	r1, r2
 80a14e2:	6840      	ldr	r0, [r0, #4]
 80a14e4:	f7ff b8a4 	b.w	80a0630 <network_listening>

080a14e8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a14e8:	b570      	push	{r4, r5, r6, lr}
 80a14ea:	4616      	mov	r6, r2
 80a14ec:	b08e      	sub	sp, #56	; 0x38
 80a14ee:	4604      	mov	r4, r0
    IPAddress addr;
 80a14f0:	a808      	add	r0, sp, #32
 80a14f2:	f7ff fd7f 	bl	80a0ff4 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a14f6:	2211      	movs	r2, #17
 80a14f8:	2100      	movs	r1, #0
 80a14fa:	a803      	add	r0, sp, #12
 80a14fc:	f000 fe71 	bl	80a21e2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1500:	4630      	mov	r0, r6
 80a1502:	f000 feba 	bl	80a227a <strlen>
 80a1506:	2500      	movs	r5, #0
 80a1508:	4b0a      	ldr	r3, [pc, #40]	; (80a1534 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a150a:	9500      	str	r5, [sp, #0]
 80a150c:	b281      	uxth	r1, r0
 80a150e:	685b      	ldr	r3, [r3, #4]
 80a1510:	aa03      	add	r2, sp, #12
 80a1512:	4630      	mov	r0, r6
 80a1514:	f7ff f818 	bl	80a0548 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1518:	b120      	cbz	r0, 80a1524 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a151a:	4629      	mov	r1, r5
 80a151c:	4620      	mov	r0, r4
 80a151e:	f7ff fd89 	bl	80a1034 <_ZN9IPAddressC1Em>
 80a1522:	e003      	b.n	80a152c <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a1524:	a903      	add	r1, sp, #12
 80a1526:	4620      	mov	r0, r4
 80a1528:	f7ff fd72 	bl	80a1010 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a152c:	4620      	mov	r0, r4
 80a152e:	b00e      	add	sp, #56	; 0x38
 80a1530:	bd70      	pop	{r4, r5, r6, pc}
 80a1532:	bf00      	nop
 80a1534:	20000514 	.word	0x20000514

080a1538 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a1538:	4b02      	ldr	r3, [pc, #8]	; (80a1544 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a153a:	4a03      	ldr	r2, [pc, #12]	; (80a1548 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a153c:	601a      	str	r2, [r3, #0]
 80a153e:	2200      	movs	r2, #0
 80a1540:	605a      	str	r2, [r3, #4]
 80a1542:	4770      	bx	lr
 80a1544:	2000051c 	.word	0x2000051c
 80a1548:	080a24cc 	.word	0x080a24cc

080a154c <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 80a154c:	b510      	push	{r4, lr}
 80a154e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a1550:	6880      	ldr	r0, [r0, #8]
 80a1552:	b108      	cbz	r0, 80a1558 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a1554:	f7fe ff3e 	bl	80a03d4 <os_mutex_recursive_destroy>
 80a1558:	4620      	mov	r0, r4
 80a155a:	bd10      	pop	{r4, pc}

080a155c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a155c:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a155e:	4e1a      	ldr	r6, [pc, #104]	; (80a15c8 <pinAvailable+0x6c>)
 80a1560:	4604      	mov	r4, r0
 80a1562:	6831      	ldr	r1, [r6, #0]
 80a1564:	f011 0501 	ands.w	r5, r1, #1
 80a1568:	d10f      	bne.n	80a158a <pinAvailable+0x2e>
 80a156a:	4630      	mov	r0, r6
 80a156c:	f7fe fd99 	bl	80a00a2 <__cxa_guard_acquire>
 80a1570:	b158      	cbz	r0, 80a158a <pinAvailable+0x2e>
 80a1572:	4629      	mov	r1, r5
 80a1574:	4815      	ldr	r0, [pc, #84]	; (80a15cc <pinAvailable+0x70>)
 80a1576:	f7ff f8bb 	bl	80a06f0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a157a:	4630      	mov	r0, r6
 80a157c:	f7fe fd96 	bl	80a00ac <__cxa_guard_release>
 80a1580:	4a13      	ldr	r2, [pc, #76]	; (80a15d0 <pinAvailable+0x74>)
 80a1582:	4914      	ldr	r1, [pc, #80]	; (80a15d4 <pinAvailable+0x78>)
 80a1584:	4811      	ldr	r0, [pc, #68]	; (80a15cc <pinAvailable+0x70>)
 80a1586:	f000 f891 	bl	80a16ac <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 80a158a:	4810      	ldr	r0, [pc, #64]	; (80a15cc <pinAvailable+0x70>)
 80a158c:	f7ff f8bf 	bl	80a070e <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a1590:	b128      	cbz	r0, 80a159e <pinAvailable+0x42>
 80a1592:	f1a4 030d 	sub.w	r3, r4, #13
 80a1596:	2b02      	cmp	r3, #2
 80a1598:	d801      	bhi.n	80a159e <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 80a159a:	2000      	movs	r0, #0
 80a159c:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a159e:	f000 f85f 	bl	80a1660 <_Z19__fetch_global_Wirev>
 80a15a2:	f7ff ff0f 	bl	80a13c4 <_ZN7TwoWire9isEnabledEv>
 80a15a6:	b108      	cbz	r0, 80a15ac <pinAvailable+0x50>
 80a15a8:	2c01      	cmp	r4, #1
 80a15aa:	d9f6      	bls.n	80a159a <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a15ac:	f7ff fe92 	bl	80a12d4 <_Z22__fetch_global_Serial1v>
 80a15b0:	f7ff fe8c 	bl	80a12cc <_ZN11USARTSerial9isEnabledEv>
 80a15b4:	b118      	cbz	r0, 80a15be <pinAvailable+0x62>
 80a15b6:	f1a4 0312 	sub.w	r3, r4, #18
 80a15ba:	2b01      	cmp	r3, #1
 80a15bc:	d9ed      	bls.n	80a159a <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a15be:	2c17      	cmp	r4, #23
 80a15c0:	bf8c      	ite	hi
 80a15c2:	2000      	movhi	r0, #0
 80a15c4:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a15c6:	bd70      	pop	{r4, r5, r6, pc}
 80a15c8:	20000524 	.word	0x20000524
 80a15cc:	20000528 	.word	0x20000528
 80a15d0:	20000068 	.word	0x20000068
 80a15d4:	080a154d 	.word	0x080a154d

080a15d8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a15d8:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a15da:	b538      	push	{r3, r4, r5, lr}
 80a15dc:	4604      	mov	r4, r0
 80a15de:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a15e0:	d80a      	bhi.n	80a15f8 <pinMode+0x20>
 80a15e2:	29ff      	cmp	r1, #255	; 0xff
 80a15e4:	d008      	beq.n	80a15f8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a15e6:	f7ff ffb9 	bl	80a155c <pinAvailable>
 80a15ea:	b128      	cbz	r0, 80a15f8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a15ec:	4629      	mov	r1, r5
 80a15ee:	4620      	mov	r0, r4
}
 80a15f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a15f4:	f7fe be9e 	b.w	80a0334 <HAL_Pin_Mode>
 80a15f8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a15fc <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a15fc:	b513      	push	{r0, r1, r4, lr}
 80a15fe:	4c08      	ldr	r4, [pc, #32]	; (80a1620 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a1600:	2300      	movs	r3, #0
 80a1602:	461a      	mov	r2, r3
 80a1604:	4619      	mov	r1, r3
 80a1606:	9300      	str	r3, [sp, #0]
 80a1608:	4620      	mov	r0, r4
 80a160a:	f7ff fd29 	bl	80a1060 <_ZN9IPAddressC1Ehhhh>
 80a160e:	4620      	mov	r0, r4
 80a1610:	4a04      	ldr	r2, [pc, #16]	; (80a1624 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a1612:	4905      	ldr	r1, [pc, #20]	; (80a1628 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1614:	b002      	add	sp, #8
 80a1616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a161a:	f000 b847 	b.w	80a16ac <__aeabi_atexit>
 80a161e:	bf00      	nop
 80a1620:	20000538 	.word	0x20000538
 80a1624:	20000068 	.word	0x20000068
 80a1628:	080a0fb1 	.word	0x080a0fb1

080a162c <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a162c:	b570      	push	{r4, r5, r6, lr}
 80a162e:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1630:	2514      	movs	r5, #20
 80a1632:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1634:	4e09      	ldr	r6, [pc, #36]	; (80a165c <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1636:	2100      	movs	r1, #0
 80a1638:	f000 fdd3 	bl	80a21e2 <memset>
 80a163c:	8025      	strh	r5, [r4, #0]
 80a163e:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1640:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1642:	60a5      	str	r5, [r4, #8]
 80a1644:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1646:	4628      	mov	r0, r5
 80a1648:	f000 f840 	bl	80a16cc <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a164c:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a164e:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1650:	4628      	mov	r0, r5
 80a1652:	f000 f83b 	bl	80a16cc <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1656:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a1658:	4620      	mov	r0, r4
 80a165a:	bd70      	pop	{r4, r5, r6, pc}
 80a165c:	080a24f8 	.word	0x080a24f8

080a1660 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a1660:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1662:	4d0e      	ldr	r5, [pc, #56]	; (80a169c <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a1664:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1666:	6829      	ldr	r1, [r5, #0]
 80a1668:	f011 0401 	ands.w	r4, r1, #1
 80a166c:	d113      	bne.n	80a1696 <_Z19__fetch_global_Wirev+0x36>
 80a166e:	4628      	mov	r0, r5
 80a1670:	f7fe fd17 	bl	80a00a2 <__cxa_guard_acquire>
 80a1674:	b178      	cbz	r0, 80a1696 <_Z19__fetch_global_Wirev+0x36>
 80a1676:	a801      	add	r0, sp, #4
 80a1678:	f7ff ffd8 	bl	80a162c <_Z17acquireWireBufferv>
 80a167c:	aa01      	add	r2, sp, #4
 80a167e:	4621      	mov	r1, r4
 80a1680:	4807      	ldr	r0, [pc, #28]	; (80a16a0 <_Z19__fetch_global_Wirev+0x40>)
 80a1682:	f7ff fe8d 	bl	80a13a0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a1686:	4628      	mov	r0, r5
 80a1688:	f7fe fd10 	bl	80a00ac <__cxa_guard_release>
 80a168c:	4a05      	ldr	r2, [pc, #20]	; (80a16a4 <_Z19__fetch_global_Wirev+0x44>)
 80a168e:	4906      	ldr	r1, [pc, #24]	; (80a16a8 <_Z19__fetch_global_Wirev+0x48>)
 80a1690:	4803      	ldr	r0, [pc, #12]	; (80a16a0 <_Z19__fetch_global_Wirev+0x40>)
 80a1692:	f000 f80b 	bl	80a16ac <__aeabi_atexit>
	return wire;
}
 80a1696:	4802      	ldr	r0, [pc, #8]	; (80a16a0 <_Z19__fetch_global_Wirev+0x40>)
 80a1698:	b007      	add	sp, #28
 80a169a:	bd30      	pop	{r4, r5, pc}
 80a169c:	20000550 	.word	0x20000550
 80a16a0:	20000554 	.word	0x20000554
 80a16a4:	20000068 	.word	0x20000068
 80a16a8:	080a1349 	.word	0x080a1349

080a16ac <__aeabi_atexit>:
 80a16ac:	460b      	mov	r3, r1
 80a16ae:	4601      	mov	r1, r0
 80a16b0:	4618      	mov	r0, r3
 80a16b2:	f000 bd7d 	b.w	80a21b0 <__cxa_atexit>
	...

080a16b8 <_ZSt15get_new_handlerv>:
 80a16b8:	4b02      	ldr	r3, [pc, #8]	; (80a16c4 <_ZSt15get_new_handlerv+0xc>)
 80a16ba:	6818      	ldr	r0, [r3, #0]
 80a16bc:	f3bf 8f5f 	dmb	sy
 80a16c0:	4770      	bx	lr
 80a16c2:	bf00      	nop
 80a16c4:	20000568 	.word	0x20000568

080a16c8 <_ZdlPvj>:
 80a16c8:	f7fe bce9 	b.w	80a009e <_ZdlPv>

080a16cc <_ZnajRKSt9nothrow_t>:
 80a16cc:	f000 b800 	b.w	80a16d0 <_ZnwjRKSt9nothrow_t>

080a16d0 <_ZnwjRKSt9nothrow_t>:
 80a16d0:	b510      	push	{r4, lr}
 80a16d2:	2800      	cmp	r0, #0
 80a16d4:	bf14      	ite	ne
 80a16d6:	4604      	movne	r4, r0
 80a16d8:	2401      	moveq	r4, #1
 80a16da:	4620      	mov	r0, r4
 80a16dc:	f7fe ffe0 	bl	80a06a0 <malloc>
 80a16e0:	b920      	cbnz	r0, 80a16ec <_ZnwjRKSt9nothrow_t+0x1c>
 80a16e2:	f7ff ffe9 	bl	80a16b8 <_ZSt15get_new_handlerv>
 80a16e6:	b108      	cbz	r0, 80a16ec <_ZnwjRKSt9nothrow_t+0x1c>
 80a16e8:	4780      	blx	r0
 80a16ea:	e7f6      	b.n	80a16da <_ZnwjRKSt9nothrow_t+0xa>
 80a16ec:	bd10      	pop	{r4, pc}

080a16ee <_ZSt25__throw_bad_function_callv>:
 80a16ee:	b508      	push	{r3, lr}
 80a16f0:	f7fe ffee 	bl	80a06d0 <abort>

080a16f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a16f4:	4b18      	ldr	r3, [pc, #96]	; (80a1758 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a16f6:	681a      	ldr	r2, [r3, #0]
 80a16f8:	07d1      	lsls	r1, r2, #31
 80a16fa:	bf5c      	itt	pl
 80a16fc:	2201      	movpl	r2, #1
 80a16fe:	601a      	strpl	r2, [r3, #0]
 80a1700:	4b16      	ldr	r3, [pc, #88]	; (80a175c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1702:	681a      	ldr	r2, [r3, #0]
 80a1704:	07d2      	lsls	r2, r2, #31
 80a1706:	bf5c      	itt	pl
 80a1708:	2201      	movpl	r2, #1
 80a170a:	601a      	strpl	r2, [r3, #0]
 80a170c:	4b14      	ldr	r3, [pc, #80]	; (80a1760 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a170e:	681a      	ldr	r2, [r3, #0]
 80a1710:	07d0      	lsls	r0, r2, #31
 80a1712:	bf5c      	itt	pl
 80a1714:	2201      	movpl	r2, #1
 80a1716:	601a      	strpl	r2, [r3, #0]
 80a1718:	4b12      	ldr	r3, [pc, #72]	; (80a1764 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a171a:	681a      	ldr	r2, [r3, #0]
 80a171c:	07d1      	lsls	r1, r2, #31
 80a171e:	bf5c      	itt	pl
 80a1720:	2201      	movpl	r2, #1
 80a1722:	601a      	strpl	r2, [r3, #0]
 80a1724:	4b10      	ldr	r3, [pc, #64]	; (80a1768 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1726:	681a      	ldr	r2, [r3, #0]
 80a1728:	07d2      	lsls	r2, r2, #31
 80a172a:	bf5c      	itt	pl
 80a172c:	2201      	movpl	r2, #1
 80a172e:	601a      	strpl	r2, [r3, #0]
 80a1730:	4b0e      	ldr	r3, [pc, #56]	; (80a176c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1732:	681a      	ldr	r2, [r3, #0]
 80a1734:	07d0      	lsls	r0, r2, #31
 80a1736:	bf5c      	itt	pl
 80a1738:	2201      	movpl	r2, #1
 80a173a:	601a      	strpl	r2, [r3, #0]
 80a173c:	4b0c      	ldr	r3, [pc, #48]	; (80a1770 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a173e:	681a      	ldr	r2, [r3, #0]
 80a1740:	07d1      	lsls	r1, r2, #31
 80a1742:	bf5c      	itt	pl
 80a1744:	2201      	movpl	r2, #1
 80a1746:	601a      	strpl	r2, [r3, #0]
 80a1748:	4b0a      	ldr	r3, [pc, #40]	; (80a1774 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a174a:	681a      	ldr	r2, [r3, #0]
 80a174c:	07d2      	lsls	r2, r2, #31
 80a174e:	bf5c      	itt	pl
 80a1750:	2201      	movpl	r2, #1
 80a1752:	601a      	strpl	r2, [r3, #0]
 80a1754:	4770      	bx	lr
 80a1756:	bf00      	nop
 80a1758:	20000588 	.word	0x20000588
 80a175c:	20000584 	.word	0x20000584
 80a1760:	20000580 	.word	0x20000580
 80a1764:	2000057c 	.word	0x2000057c
 80a1768:	20000578 	.word	0x20000578
 80a176c:	20000574 	.word	0x20000574
 80a1770:	20000570 	.word	0x20000570
 80a1774:	2000056c 	.word	0x2000056c

080a1778 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1778:	4b24      	ldr	r3, [pc, #144]	; (80a180c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a177a:	681a      	ldr	r2, [r3, #0]
 80a177c:	07d0      	lsls	r0, r2, #31
 80a177e:	bf5c      	itt	pl
 80a1780:	2201      	movpl	r2, #1
 80a1782:	601a      	strpl	r2, [r3, #0]
 80a1784:	4b22      	ldr	r3, [pc, #136]	; (80a1810 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a1786:	681a      	ldr	r2, [r3, #0]
 80a1788:	07d1      	lsls	r1, r2, #31
 80a178a:	bf5c      	itt	pl
 80a178c:	2201      	movpl	r2, #1
 80a178e:	601a      	strpl	r2, [r3, #0]
 80a1790:	4b20      	ldr	r3, [pc, #128]	; (80a1814 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1792:	681a      	ldr	r2, [r3, #0]
 80a1794:	07d2      	lsls	r2, r2, #31
 80a1796:	bf5c      	itt	pl
 80a1798:	2201      	movpl	r2, #1
 80a179a:	601a      	strpl	r2, [r3, #0]
 80a179c:	4b1e      	ldr	r3, [pc, #120]	; (80a1818 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a179e:	681a      	ldr	r2, [r3, #0]
 80a17a0:	07d0      	lsls	r0, r2, #31
 80a17a2:	bf5c      	itt	pl
 80a17a4:	2201      	movpl	r2, #1
 80a17a6:	601a      	strpl	r2, [r3, #0]
 80a17a8:	4b1c      	ldr	r3, [pc, #112]	; (80a181c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a17aa:	681a      	ldr	r2, [r3, #0]
 80a17ac:	07d1      	lsls	r1, r2, #31
 80a17ae:	bf5c      	itt	pl
 80a17b0:	2201      	movpl	r2, #1
 80a17b2:	601a      	strpl	r2, [r3, #0]
 80a17b4:	4b1a      	ldr	r3, [pc, #104]	; (80a1820 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a17b6:	681a      	ldr	r2, [r3, #0]
 80a17b8:	07d2      	lsls	r2, r2, #31
 80a17ba:	bf5c      	itt	pl
 80a17bc:	2201      	movpl	r2, #1
 80a17be:	601a      	strpl	r2, [r3, #0]
 80a17c0:	4b18      	ldr	r3, [pc, #96]	; (80a1824 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a17c2:	681a      	ldr	r2, [r3, #0]
 80a17c4:	07d0      	lsls	r0, r2, #31
 80a17c6:	bf5c      	itt	pl
 80a17c8:	2201      	movpl	r2, #1
 80a17ca:	601a      	strpl	r2, [r3, #0]
 80a17cc:	4b16      	ldr	r3, [pc, #88]	; (80a1828 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a17ce:	681a      	ldr	r2, [r3, #0]
 80a17d0:	07d1      	lsls	r1, r2, #31
 80a17d2:	bf5c      	itt	pl
 80a17d4:	2201      	movpl	r2, #1
 80a17d6:	601a      	strpl	r2, [r3, #0]
 80a17d8:	4b14      	ldr	r3, [pc, #80]	; (80a182c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a17da:	681a      	ldr	r2, [r3, #0]
 80a17dc:	07d2      	lsls	r2, r2, #31
 80a17de:	bf5c      	itt	pl
 80a17e0:	2201      	movpl	r2, #1
 80a17e2:	601a      	strpl	r2, [r3, #0]
 80a17e4:	4b12      	ldr	r3, [pc, #72]	; (80a1830 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a17e6:	681a      	ldr	r2, [r3, #0]
 80a17e8:	07d0      	lsls	r0, r2, #31
 80a17ea:	bf5c      	itt	pl
 80a17ec:	2201      	movpl	r2, #1
 80a17ee:	601a      	strpl	r2, [r3, #0]
 80a17f0:	4b10      	ldr	r3, [pc, #64]	; (80a1834 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a17f2:	681a      	ldr	r2, [r3, #0]
 80a17f4:	07d1      	lsls	r1, r2, #31
 80a17f6:	bf5c      	itt	pl
 80a17f8:	2201      	movpl	r2, #1
 80a17fa:	601a      	strpl	r2, [r3, #0]
 80a17fc:	4b0e      	ldr	r3, [pc, #56]	; (80a1838 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a17fe:	681a      	ldr	r2, [r3, #0]
 80a1800:	07d2      	lsls	r2, r2, #31
 80a1802:	bf5c      	itt	pl
 80a1804:	2201      	movpl	r2, #1
 80a1806:	601a      	strpl	r2, [r3, #0]
 80a1808:	4770      	bx	lr
 80a180a:	bf00      	nop
 80a180c:	200005b8 	.word	0x200005b8
 80a1810:	200005b4 	.word	0x200005b4
 80a1814:	200005b0 	.word	0x200005b0
 80a1818:	200005ac 	.word	0x200005ac
 80a181c:	200005a8 	.word	0x200005a8
 80a1820:	200005a4 	.word	0x200005a4
 80a1824:	200005a0 	.word	0x200005a0
 80a1828:	2000059c 	.word	0x2000059c
 80a182c:	20000598 	.word	0x20000598
 80a1830:	20000594 	.word	0x20000594
 80a1834:	20000590 	.word	0x20000590
 80a1838:	2000058c 	.word	0x2000058c

080a183c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a183c:	4b24      	ldr	r3, [pc, #144]	; (80a18d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a183e:	681a      	ldr	r2, [r3, #0]
 80a1840:	07d0      	lsls	r0, r2, #31
 80a1842:	bf5c      	itt	pl
 80a1844:	2201      	movpl	r2, #1
 80a1846:	601a      	strpl	r2, [r3, #0]
 80a1848:	4b22      	ldr	r3, [pc, #136]	; (80a18d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a184a:	681a      	ldr	r2, [r3, #0]
 80a184c:	07d1      	lsls	r1, r2, #31
 80a184e:	bf5c      	itt	pl
 80a1850:	2201      	movpl	r2, #1
 80a1852:	601a      	strpl	r2, [r3, #0]
 80a1854:	4b20      	ldr	r3, [pc, #128]	; (80a18d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1856:	681a      	ldr	r2, [r3, #0]
 80a1858:	07d2      	lsls	r2, r2, #31
 80a185a:	bf5c      	itt	pl
 80a185c:	2201      	movpl	r2, #1
 80a185e:	601a      	strpl	r2, [r3, #0]
 80a1860:	4b1e      	ldr	r3, [pc, #120]	; (80a18dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1862:	681a      	ldr	r2, [r3, #0]
 80a1864:	07d0      	lsls	r0, r2, #31
 80a1866:	bf5c      	itt	pl
 80a1868:	2201      	movpl	r2, #1
 80a186a:	601a      	strpl	r2, [r3, #0]
 80a186c:	4b1c      	ldr	r3, [pc, #112]	; (80a18e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a186e:	681a      	ldr	r2, [r3, #0]
 80a1870:	07d1      	lsls	r1, r2, #31
 80a1872:	bf5c      	itt	pl
 80a1874:	2201      	movpl	r2, #1
 80a1876:	601a      	strpl	r2, [r3, #0]
 80a1878:	4b1a      	ldr	r3, [pc, #104]	; (80a18e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a187a:	681a      	ldr	r2, [r3, #0]
 80a187c:	07d2      	lsls	r2, r2, #31
 80a187e:	bf5c      	itt	pl
 80a1880:	2201      	movpl	r2, #1
 80a1882:	601a      	strpl	r2, [r3, #0]
 80a1884:	4b18      	ldr	r3, [pc, #96]	; (80a18e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1886:	681a      	ldr	r2, [r3, #0]
 80a1888:	07d0      	lsls	r0, r2, #31
 80a188a:	bf5c      	itt	pl
 80a188c:	2201      	movpl	r2, #1
 80a188e:	601a      	strpl	r2, [r3, #0]
 80a1890:	4b16      	ldr	r3, [pc, #88]	; (80a18ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1892:	681a      	ldr	r2, [r3, #0]
 80a1894:	07d1      	lsls	r1, r2, #31
 80a1896:	bf5c      	itt	pl
 80a1898:	2201      	movpl	r2, #1
 80a189a:	601a      	strpl	r2, [r3, #0]
 80a189c:	4b14      	ldr	r3, [pc, #80]	; (80a18f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a189e:	681a      	ldr	r2, [r3, #0]
 80a18a0:	07d2      	lsls	r2, r2, #31
 80a18a2:	bf5c      	itt	pl
 80a18a4:	2201      	movpl	r2, #1
 80a18a6:	601a      	strpl	r2, [r3, #0]
 80a18a8:	4b12      	ldr	r3, [pc, #72]	; (80a18f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a18aa:	681a      	ldr	r2, [r3, #0]
 80a18ac:	07d0      	lsls	r0, r2, #31
 80a18ae:	bf5c      	itt	pl
 80a18b0:	2201      	movpl	r2, #1
 80a18b2:	601a      	strpl	r2, [r3, #0]
 80a18b4:	4b10      	ldr	r3, [pc, #64]	; (80a18f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a18b6:	681a      	ldr	r2, [r3, #0]
 80a18b8:	07d1      	lsls	r1, r2, #31
 80a18ba:	bf5c      	itt	pl
 80a18bc:	2201      	movpl	r2, #1
 80a18be:	601a      	strpl	r2, [r3, #0]
 80a18c0:	4b0e      	ldr	r3, [pc, #56]	; (80a18fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a18c2:	681a      	ldr	r2, [r3, #0]
 80a18c4:	07d2      	lsls	r2, r2, #31
 80a18c6:	bf5c      	itt	pl
 80a18c8:	2201      	movpl	r2, #1
 80a18ca:	601a      	strpl	r2, [r3, #0]
 80a18cc:	4770      	bx	lr
 80a18ce:	bf00      	nop
 80a18d0:	200005e8 	.word	0x200005e8
 80a18d4:	200005e4 	.word	0x200005e4
 80a18d8:	200005e0 	.word	0x200005e0
 80a18dc:	200005dc 	.word	0x200005dc
 80a18e0:	200005d8 	.word	0x200005d8
 80a18e4:	200005d4 	.word	0x200005d4
 80a18e8:	200005d0 	.word	0x200005d0
 80a18ec:	200005cc 	.word	0x200005cc
 80a18f0:	200005c8 	.word	0x200005c8
 80a18f4:	200005c4 	.word	0x200005c4
 80a18f8:	200005c0 	.word	0x200005c0
 80a18fc:	200005bc 	.word	0x200005bc

080a1900 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1900:	4b18      	ldr	r3, [pc, #96]	; (80a1964 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1902:	681a      	ldr	r2, [r3, #0]
 80a1904:	07d1      	lsls	r1, r2, #31
 80a1906:	bf5c      	itt	pl
 80a1908:	2201      	movpl	r2, #1
 80a190a:	601a      	strpl	r2, [r3, #0]
 80a190c:	4b16      	ldr	r3, [pc, #88]	; (80a1968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a190e:	681a      	ldr	r2, [r3, #0]
 80a1910:	07d2      	lsls	r2, r2, #31
 80a1912:	bf5c      	itt	pl
 80a1914:	2201      	movpl	r2, #1
 80a1916:	601a      	strpl	r2, [r3, #0]
 80a1918:	4b14      	ldr	r3, [pc, #80]	; (80a196c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a191a:	681a      	ldr	r2, [r3, #0]
 80a191c:	07d0      	lsls	r0, r2, #31
 80a191e:	bf5c      	itt	pl
 80a1920:	2201      	movpl	r2, #1
 80a1922:	601a      	strpl	r2, [r3, #0]
 80a1924:	4b12      	ldr	r3, [pc, #72]	; (80a1970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1926:	681a      	ldr	r2, [r3, #0]
 80a1928:	07d1      	lsls	r1, r2, #31
 80a192a:	bf5c      	itt	pl
 80a192c:	2201      	movpl	r2, #1
 80a192e:	601a      	strpl	r2, [r3, #0]
 80a1930:	4b10      	ldr	r3, [pc, #64]	; (80a1974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1932:	681a      	ldr	r2, [r3, #0]
 80a1934:	07d2      	lsls	r2, r2, #31
 80a1936:	bf5c      	itt	pl
 80a1938:	2201      	movpl	r2, #1
 80a193a:	601a      	strpl	r2, [r3, #0]
 80a193c:	4b0e      	ldr	r3, [pc, #56]	; (80a1978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a193e:	681a      	ldr	r2, [r3, #0]
 80a1940:	07d0      	lsls	r0, r2, #31
 80a1942:	bf5c      	itt	pl
 80a1944:	2201      	movpl	r2, #1
 80a1946:	601a      	strpl	r2, [r3, #0]
 80a1948:	4b0c      	ldr	r3, [pc, #48]	; (80a197c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a194a:	681a      	ldr	r2, [r3, #0]
 80a194c:	07d1      	lsls	r1, r2, #31
 80a194e:	bf5c      	itt	pl
 80a1950:	2201      	movpl	r2, #1
 80a1952:	601a      	strpl	r2, [r3, #0]
 80a1954:	4b0a      	ldr	r3, [pc, #40]	; (80a1980 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1956:	681a      	ldr	r2, [r3, #0]
 80a1958:	07d2      	lsls	r2, r2, #31
 80a195a:	bf5c      	itt	pl
 80a195c:	2201      	movpl	r2, #1
 80a195e:	601a      	strpl	r2, [r3, #0]
 80a1960:	4770      	bx	lr
 80a1962:	bf00      	nop
 80a1964:	20000608 	.word	0x20000608
 80a1968:	20000604 	.word	0x20000604
 80a196c:	20000600 	.word	0x20000600
 80a1970:	200005fc 	.word	0x200005fc
 80a1974:	200005f8 	.word	0x200005f8
 80a1978:	200005f4 	.word	0x200005f4
 80a197c:	200005f0 	.word	0x200005f0
 80a1980:	200005ec 	.word	0x200005ec

080a1984 <__aeabi_drsub>:
 80a1984:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a1988:	e002      	b.n	80a1990 <__adddf3>
 80a198a:	bf00      	nop

080a198c <__aeabi_dsub>:
 80a198c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a1990 <__adddf3>:
 80a1990:	b530      	push	{r4, r5, lr}
 80a1992:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a1996:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a199a:	ea94 0f05 	teq	r4, r5
 80a199e:	bf08      	it	eq
 80a19a0:	ea90 0f02 	teqeq	r0, r2
 80a19a4:	bf1f      	itttt	ne
 80a19a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a19aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a19ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a19b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a19b6:	f000 80e2 	beq.w	80a1b7e <__adddf3+0x1ee>
 80a19ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a19be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a19c2:	bfb8      	it	lt
 80a19c4:	426d      	neglt	r5, r5
 80a19c6:	dd0c      	ble.n	80a19e2 <__adddf3+0x52>
 80a19c8:	442c      	add	r4, r5
 80a19ca:	ea80 0202 	eor.w	r2, r0, r2
 80a19ce:	ea81 0303 	eor.w	r3, r1, r3
 80a19d2:	ea82 0000 	eor.w	r0, r2, r0
 80a19d6:	ea83 0101 	eor.w	r1, r3, r1
 80a19da:	ea80 0202 	eor.w	r2, r0, r2
 80a19de:	ea81 0303 	eor.w	r3, r1, r3
 80a19e2:	2d36      	cmp	r5, #54	; 0x36
 80a19e4:	bf88      	it	hi
 80a19e6:	bd30      	pophi	{r4, r5, pc}
 80a19e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a19ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a19f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a19f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a19f8:	d002      	beq.n	80a1a00 <__adddf3+0x70>
 80a19fa:	4240      	negs	r0, r0
 80a19fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1a00:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a1a04:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1a08:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a1a0c:	d002      	beq.n	80a1a14 <__adddf3+0x84>
 80a1a0e:	4252      	negs	r2, r2
 80a1a10:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a1a14:	ea94 0f05 	teq	r4, r5
 80a1a18:	f000 80a7 	beq.w	80a1b6a <__adddf3+0x1da>
 80a1a1c:	f1a4 0401 	sub.w	r4, r4, #1
 80a1a20:	f1d5 0e20 	rsbs	lr, r5, #32
 80a1a24:	db0d      	blt.n	80a1a42 <__adddf3+0xb2>
 80a1a26:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a1a2a:	fa22 f205 	lsr.w	r2, r2, r5
 80a1a2e:	1880      	adds	r0, r0, r2
 80a1a30:	f141 0100 	adc.w	r1, r1, #0
 80a1a34:	fa03 f20e 	lsl.w	r2, r3, lr
 80a1a38:	1880      	adds	r0, r0, r2
 80a1a3a:	fa43 f305 	asr.w	r3, r3, r5
 80a1a3e:	4159      	adcs	r1, r3
 80a1a40:	e00e      	b.n	80a1a60 <__adddf3+0xd0>
 80a1a42:	f1a5 0520 	sub.w	r5, r5, #32
 80a1a46:	f10e 0e20 	add.w	lr, lr, #32
 80a1a4a:	2a01      	cmp	r2, #1
 80a1a4c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a1a50:	bf28      	it	cs
 80a1a52:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a1a56:	fa43 f305 	asr.w	r3, r3, r5
 80a1a5a:	18c0      	adds	r0, r0, r3
 80a1a5c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a1a60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1a64:	d507      	bpl.n	80a1a76 <__adddf3+0xe6>
 80a1a66:	f04f 0e00 	mov.w	lr, #0
 80a1a6a:	f1dc 0c00 	rsbs	ip, ip, #0
 80a1a6e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a1a72:	eb6e 0101 	sbc.w	r1, lr, r1
 80a1a76:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a1a7a:	d31b      	bcc.n	80a1ab4 <__adddf3+0x124>
 80a1a7c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a1a80:	d30c      	bcc.n	80a1a9c <__adddf3+0x10c>
 80a1a82:	0849      	lsrs	r1, r1, #1
 80a1a84:	ea5f 0030 	movs.w	r0, r0, rrx
 80a1a88:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a1a8c:	f104 0401 	add.w	r4, r4, #1
 80a1a90:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a1a94:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a1a98:	f080 809a 	bcs.w	80a1bd0 <__adddf3+0x240>
 80a1a9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1aa0:	bf08      	it	eq
 80a1aa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1aa6:	f150 0000 	adcs.w	r0, r0, #0
 80a1aaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1aae:	ea41 0105 	orr.w	r1, r1, r5
 80a1ab2:	bd30      	pop	{r4, r5, pc}
 80a1ab4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a1ab8:	4140      	adcs	r0, r0
 80a1aba:	eb41 0101 	adc.w	r1, r1, r1
 80a1abe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1ac2:	f1a4 0401 	sub.w	r4, r4, #1
 80a1ac6:	d1e9      	bne.n	80a1a9c <__adddf3+0x10c>
 80a1ac8:	f091 0f00 	teq	r1, #0
 80a1acc:	bf04      	itt	eq
 80a1ace:	4601      	moveq	r1, r0
 80a1ad0:	2000      	moveq	r0, #0
 80a1ad2:	fab1 f381 	clz	r3, r1
 80a1ad6:	bf08      	it	eq
 80a1ad8:	3320      	addeq	r3, #32
 80a1ada:	f1a3 030b 	sub.w	r3, r3, #11
 80a1ade:	f1b3 0220 	subs.w	r2, r3, #32
 80a1ae2:	da0c      	bge.n	80a1afe <__adddf3+0x16e>
 80a1ae4:	320c      	adds	r2, #12
 80a1ae6:	dd08      	ble.n	80a1afa <__adddf3+0x16a>
 80a1ae8:	f102 0c14 	add.w	ip, r2, #20
 80a1aec:	f1c2 020c 	rsb	r2, r2, #12
 80a1af0:	fa01 f00c 	lsl.w	r0, r1, ip
 80a1af4:	fa21 f102 	lsr.w	r1, r1, r2
 80a1af8:	e00c      	b.n	80a1b14 <__adddf3+0x184>
 80a1afa:	f102 0214 	add.w	r2, r2, #20
 80a1afe:	bfd8      	it	le
 80a1b00:	f1c2 0c20 	rsble	ip, r2, #32
 80a1b04:	fa01 f102 	lsl.w	r1, r1, r2
 80a1b08:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a1b0c:	bfdc      	itt	le
 80a1b0e:	ea41 010c 	orrle.w	r1, r1, ip
 80a1b12:	4090      	lslle	r0, r2
 80a1b14:	1ae4      	subs	r4, r4, r3
 80a1b16:	bfa2      	ittt	ge
 80a1b18:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a1b1c:	4329      	orrge	r1, r5
 80a1b1e:	bd30      	popge	{r4, r5, pc}
 80a1b20:	ea6f 0404 	mvn.w	r4, r4
 80a1b24:	3c1f      	subs	r4, #31
 80a1b26:	da1c      	bge.n	80a1b62 <__adddf3+0x1d2>
 80a1b28:	340c      	adds	r4, #12
 80a1b2a:	dc0e      	bgt.n	80a1b4a <__adddf3+0x1ba>
 80a1b2c:	f104 0414 	add.w	r4, r4, #20
 80a1b30:	f1c4 0220 	rsb	r2, r4, #32
 80a1b34:	fa20 f004 	lsr.w	r0, r0, r4
 80a1b38:	fa01 f302 	lsl.w	r3, r1, r2
 80a1b3c:	ea40 0003 	orr.w	r0, r0, r3
 80a1b40:	fa21 f304 	lsr.w	r3, r1, r4
 80a1b44:	ea45 0103 	orr.w	r1, r5, r3
 80a1b48:	bd30      	pop	{r4, r5, pc}
 80a1b4a:	f1c4 040c 	rsb	r4, r4, #12
 80a1b4e:	f1c4 0220 	rsb	r2, r4, #32
 80a1b52:	fa20 f002 	lsr.w	r0, r0, r2
 80a1b56:	fa01 f304 	lsl.w	r3, r1, r4
 80a1b5a:	ea40 0003 	orr.w	r0, r0, r3
 80a1b5e:	4629      	mov	r1, r5
 80a1b60:	bd30      	pop	{r4, r5, pc}
 80a1b62:	fa21 f004 	lsr.w	r0, r1, r4
 80a1b66:	4629      	mov	r1, r5
 80a1b68:	bd30      	pop	{r4, r5, pc}
 80a1b6a:	f094 0f00 	teq	r4, #0
 80a1b6e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a1b72:	bf06      	itte	eq
 80a1b74:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a1b78:	3401      	addeq	r4, #1
 80a1b7a:	3d01      	subne	r5, #1
 80a1b7c:	e74e      	b.n	80a1a1c <__adddf3+0x8c>
 80a1b7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1b82:	bf18      	it	ne
 80a1b84:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1b88:	d029      	beq.n	80a1bde <__adddf3+0x24e>
 80a1b8a:	ea94 0f05 	teq	r4, r5
 80a1b8e:	bf08      	it	eq
 80a1b90:	ea90 0f02 	teqeq	r0, r2
 80a1b94:	d005      	beq.n	80a1ba2 <__adddf3+0x212>
 80a1b96:	ea54 0c00 	orrs.w	ip, r4, r0
 80a1b9a:	bf04      	itt	eq
 80a1b9c:	4619      	moveq	r1, r3
 80a1b9e:	4610      	moveq	r0, r2
 80a1ba0:	bd30      	pop	{r4, r5, pc}
 80a1ba2:	ea91 0f03 	teq	r1, r3
 80a1ba6:	bf1e      	ittt	ne
 80a1ba8:	2100      	movne	r1, #0
 80a1baa:	2000      	movne	r0, #0
 80a1bac:	bd30      	popne	{r4, r5, pc}
 80a1bae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a1bb2:	d105      	bne.n	80a1bc0 <__adddf3+0x230>
 80a1bb4:	0040      	lsls	r0, r0, #1
 80a1bb6:	4149      	adcs	r1, r1
 80a1bb8:	bf28      	it	cs
 80a1bba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a1bbe:	bd30      	pop	{r4, r5, pc}
 80a1bc0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a1bc4:	bf3c      	itt	cc
 80a1bc6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a1bca:	bd30      	popcc	{r4, r5, pc}
 80a1bcc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1bd0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a1bd4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1bd8:	f04f 0000 	mov.w	r0, #0
 80a1bdc:	bd30      	pop	{r4, r5, pc}
 80a1bde:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1be2:	bf1a      	itte	ne
 80a1be4:	4619      	movne	r1, r3
 80a1be6:	4610      	movne	r0, r2
 80a1be8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a1bec:	bf1c      	itt	ne
 80a1bee:	460b      	movne	r3, r1
 80a1bf0:	4602      	movne	r2, r0
 80a1bf2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1bf6:	bf06      	itte	eq
 80a1bf8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a1bfc:	ea91 0f03 	teqeq	r1, r3
 80a1c00:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a1c04:	bd30      	pop	{r4, r5, pc}
 80a1c06:	bf00      	nop

080a1c08 <__aeabi_ui2d>:
 80a1c08:	f090 0f00 	teq	r0, #0
 80a1c0c:	bf04      	itt	eq
 80a1c0e:	2100      	moveq	r1, #0
 80a1c10:	4770      	bxeq	lr
 80a1c12:	b530      	push	{r4, r5, lr}
 80a1c14:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1c18:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1c1c:	f04f 0500 	mov.w	r5, #0
 80a1c20:	f04f 0100 	mov.w	r1, #0
 80a1c24:	e750      	b.n	80a1ac8 <__adddf3+0x138>
 80a1c26:	bf00      	nop

080a1c28 <__aeabi_i2d>:
 80a1c28:	f090 0f00 	teq	r0, #0
 80a1c2c:	bf04      	itt	eq
 80a1c2e:	2100      	moveq	r1, #0
 80a1c30:	4770      	bxeq	lr
 80a1c32:	b530      	push	{r4, r5, lr}
 80a1c34:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1c38:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1c3c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a1c40:	bf48      	it	mi
 80a1c42:	4240      	negmi	r0, r0
 80a1c44:	f04f 0100 	mov.w	r1, #0
 80a1c48:	e73e      	b.n	80a1ac8 <__adddf3+0x138>
 80a1c4a:	bf00      	nop

080a1c4c <__aeabi_f2d>:
 80a1c4c:	0042      	lsls	r2, r0, #1
 80a1c4e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a1c52:	ea4f 0131 	mov.w	r1, r1, rrx
 80a1c56:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a1c5a:	bf1f      	itttt	ne
 80a1c5c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a1c60:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1c64:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a1c68:	4770      	bxne	lr
 80a1c6a:	f092 0f00 	teq	r2, #0
 80a1c6e:	bf14      	ite	ne
 80a1c70:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1c74:	4770      	bxeq	lr
 80a1c76:	b530      	push	{r4, r5, lr}
 80a1c78:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a1c7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1c80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1c84:	e720      	b.n	80a1ac8 <__adddf3+0x138>
 80a1c86:	bf00      	nop

080a1c88 <__aeabi_ul2d>:
 80a1c88:	ea50 0201 	orrs.w	r2, r0, r1
 80a1c8c:	bf08      	it	eq
 80a1c8e:	4770      	bxeq	lr
 80a1c90:	b530      	push	{r4, r5, lr}
 80a1c92:	f04f 0500 	mov.w	r5, #0
 80a1c96:	e00a      	b.n	80a1cae <__aeabi_l2d+0x16>

080a1c98 <__aeabi_l2d>:
 80a1c98:	ea50 0201 	orrs.w	r2, r0, r1
 80a1c9c:	bf08      	it	eq
 80a1c9e:	4770      	bxeq	lr
 80a1ca0:	b530      	push	{r4, r5, lr}
 80a1ca2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a1ca6:	d502      	bpl.n	80a1cae <__aeabi_l2d+0x16>
 80a1ca8:	4240      	negs	r0, r0
 80a1caa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1cae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1cb2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1cb6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a1cba:	f43f aedc 	beq.w	80a1a76 <__adddf3+0xe6>
 80a1cbe:	f04f 0203 	mov.w	r2, #3
 80a1cc2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1cc6:	bf18      	it	ne
 80a1cc8:	3203      	addne	r2, #3
 80a1cca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1cce:	bf18      	it	ne
 80a1cd0:	3203      	addne	r2, #3
 80a1cd2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a1cd6:	f1c2 0320 	rsb	r3, r2, #32
 80a1cda:	fa00 fc03 	lsl.w	ip, r0, r3
 80a1cde:	fa20 f002 	lsr.w	r0, r0, r2
 80a1ce2:	fa01 fe03 	lsl.w	lr, r1, r3
 80a1ce6:	ea40 000e 	orr.w	r0, r0, lr
 80a1cea:	fa21 f102 	lsr.w	r1, r1, r2
 80a1cee:	4414      	add	r4, r2
 80a1cf0:	e6c1      	b.n	80a1a76 <__adddf3+0xe6>
 80a1cf2:	bf00      	nop

080a1cf4 <__aeabi_frsub>:
 80a1cf4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a1cf8:	e002      	b.n	80a1d00 <__addsf3>
 80a1cfa:	bf00      	nop

080a1cfc <__aeabi_fsub>:
 80a1cfc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a1d00 <__addsf3>:
 80a1d00:	0042      	lsls	r2, r0, #1
 80a1d02:	bf1f      	itttt	ne
 80a1d04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a1d08:	ea92 0f03 	teqne	r2, r3
 80a1d0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a1d10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a1d14:	d06a      	beq.n	80a1dec <__addsf3+0xec>
 80a1d16:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a1d1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a1d1e:	bfc1      	itttt	gt
 80a1d20:	18d2      	addgt	r2, r2, r3
 80a1d22:	4041      	eorgt	r1, r0
 80a1d24:	4048      	eorgt	r0, r1
 80a1d26:	4041      	eorgt	r1, r0
 80a1d28:	bfb8      	it	lt
 80a1d2a:	425b      	neglt	r3, r3
 80a1d2c:	2b19      	cmp	r3, #25
 80a1d2e:	bf88      	it	hi
 80a1d30:	4770      	bxhi	lr
 80a1d32:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a1d36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1d3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a1d3e:	bf18      	it	ne
 80a1d40:	4240      	negne	r0, r0
 80a1d42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1d46:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a1d4a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a1d4e:	bf18      	it	ne
 80a1d50:	4249      	negne	r1, r1
 80a1d52:	ea92 0f03 	teq	r2, r3
 80a1d56:	d03f      	beq.n	80a1dd8 <__addsf3+0xd8>
 80a1d58:	f1a2 0201 	sub.w	r2, r2, #1
 80a1d5c:	fa41 fc03 	asr.w	ip, r1, r3
 80a1d60:	eb10 000c 	adds.w	r0, r0, ip
 80a1d64:	f1c3 0320 	rsb	r3, r3, #32
 80a1d68:	fa01 f103 	lsl.w	r1, r1, r3
 80a1d6c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a1d70:	d502      	bpl.n	80a1d78 <__addsf3+0x78>
 80a1d72:	4249      	negs	r1, r1
 80a1d74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a1d78:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a1d7c:	d313      	bcc.n	80a1da6 <__addsf3+0xa6>
 80a1d7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a1d82:	d306      	bcc.n	80a1d92 <__addsf3+0x92>
 80a1d84:	0840      	lsrs	r0, r0, #1
 80a1d86:	ea4f 0131 	mov.w	r1, r1, rrx
 80a1d8a:	f102 0201 	add.w	r2, r2, #1
 80a1d8e:	2afe      	cmp	r2, #254	; 0xfe
 80a1d90:	d251      	bcs.n	80a1e36 <__addsf3+0x136>
 80a1d92:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a1d96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a1d9a:	bf08      	it	eq
 80a1d9c:	f020 0001 	biceq.w	r0, r0, #1
 80a1da0:	ea40 0003 	orr.w	r0, r0, r3
 80a1da4:	4770      	bx	lr
 80a1da6:	0049      	lsls	r1, r1, #1
 80a1da8:	eb40 0000 	adc.w	r0, r0, r0
 80a1dac:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a1db0:	f1a2 0201 	sub.w	r2, r2, #1
 80a1db4:	d1ed      	bne.n	80a1d92 <__addsf3+0x92>
 80a1db6:	fab0 fc80 	clz	ip, r0
 80a1dba:	f1ac 0c08 	sub.w	ip, ip, #8
 80a1dbe:	ebb2 020c 	subs.w	r2, r2, ip
 80a1dc2:	fa00 f00c 	lsl.w	r0, r0, ip
 80a1dc6:	bfaa      	itet	ge
 80a1dc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a1dcc:	4252      	neglt	r2, r2
 80a1dce:	4318      	orrge	r0, r3
 80a1dd0:	bfbc      	itt	lt
 80a1dd2:	40d0      	lsrlt	r0, r2
 80a1dd4:	4318      	orrlt	r0, r3
 80a1dd6:	4770      	bx	lr
 80a1dd8:	f092 0f00 	teq	r2, #0
 80a1ddc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a1de0:	bf06      	itte	eq
 80a1de2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a1de6:	3201      	addeq	r2, #1
 80a1de8:	3b01      	subne	r3, #1
 80a1dea:	e7b5      	b.n	80a1d58 <__addsf3+0x58>
 80a1dec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a1df0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a1df4:	bf18      	it	ne
 80a1df6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a1dfa:	d021      	beq.n	80a1e40 <__addsf3+0x140>
 80a1dfc:	ea92 0f03 	teq	r2, r3
 80a1e00:	d004      	beq.n	80a1e0c <__addsf3+0x10c>
 80a1e02:	f092 0f00 	teq	r2, #0
 80a1e06:	bf08      	it	eq
 80a1e08:	4608      	moveq	r0, r1
 80a1e0a:	4770      	bx	lr
 80a1e0c:	ea90 0f01 	teq	r0, r1
 80a1e10:	bf1c      	itt	ne
 80a1e12:	2000      	movne	r0, #0
 80a1e14:	4770      	bxne	lr
 80a1e16:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a1e1a:	d104      	bne.n	80a1e26 <__addsf3+0x126>
 80a1e1c:	0040      	lsls	r0, r0, #1
 80a1e1e:	bf28      	it	cs
 80a1e20:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a1e24:	4770      	bx	lr
 80a1e26:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a1e2a:	bf3c      	itt	cc
 80a1e2c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a1e30:	4770      	bxcc	lr
 80a1e32:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a1e36:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a1e3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1e3e:	4770      	bx	lr
 80a1e40:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a1e44:	bf16      	itet	ne
 80a1e46:	4608      	movne	r0, r1
 80a1e48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a1e4c:	4601      	movne	r1, r0
 80a1e4e:	0242      	lsls	r2, r0, #9
 80a1e50:	bf06      	itte	eq
 80a1e52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a1e56:	ea90 0f01 	teqeq	r0, r1
 80a1e5a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a1e5e:	4770      	bx	lr

080a1e60 <__aeabi_ui2f>:
 80a1e60:	f04f 0300 	mov.w	r3, #0
 80a1e64:	e004      	b.n	80a1e70 <__aeabi_i2f+0x8>
 80a1e66:	bf00      	nop

080a1e68 <__aeabi_i2f>:
 80a1e68:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a1e6c:	bf48      	it	mi
 80a1e6e:	4240      	negmi	r0, r0
 80a1e70:	ea5f 0c00 	movs.w	ip, r0
 80a1e74:	bf08      	it	eq
 80a1e76:	4770      	bxeq	lr
 80a1e78:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a1e7c:	4601      	mov	r1, r0
 80a1e7e:	f04f 0000 	mov.w	r0, #0
 80a1e82:	e01c      	b.n	80a1ebe <__aeabi_l2f+0x2a>

080a1e84 <__aeabi_ul2f>:
 80a1e84:	ea50 0201 	orrs.w	r2, r0, r1
 80a1e88:	bf08      	it	eq
 80a1e8a:	4770      	bxeq	lr
 80a1e8c:	f04f 0300 	mov.w	r3, #0
 80a1e90:	e00a      	b.n	80a1ea8 <__aeabi_l2f+0x14>
 80a1e92:	bf00      	nop

080a1e94 <__aeabi_l2f>:
 80a1e94:	ea50 0201 	orrs.w	r2, r0, r1
 80a1e98:	bf08      	it	eq
 80a1e9a:	4770      	bxeq	lr
 80a1e9c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a1ea0:	d502      	bpl.n	80a1ea8 <__aeabi_l2f+0x14>
 80a1ea2:	4240      	negs	r0, r0
 80a1ea4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1ea8:	ea5f 0c01 	movs.w	ip, r1
 80a1eac:	bf02      	ittt	eq
 80a1eae:	4684      	moveq	ip, r0
 80a1eb0:	4601      	moveq	r1, r0
 80a1eb2:	2000      	moveq	r0, #0
 80a1eb4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a1eb8:	bf08      	it	eq
 80a1eba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a1ebe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a1ec2:	fabc f28c 	clz	r2, ip
 80a1ec6:	3a08      	subs	r2, #8
 80a1ec8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a1ecc:	db10      	blt.n	80a1ef0 <__aeabi_l2f+0x5c>
 80a1ece:	fa01 fc02 	lsl.w	ip, r1, r2
 80a1ed2:	4463      	add	r3, ip
 80a1ed4:	fa00 fc02 	lsl.w	ip, r0, r2
 80a1ed8:	f1c2 0220 	rsb	r2, r2, #32
 80a1edc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1ee0:	fa20 f202 	lsr.w	r2, r0, r2
 80a1ee4:	eb43 0002 	adc.w	r0, r3, r2
 80a1ee8:	bf08      	it	eq
 80a1eea:	f020 0001 	biceq.w	r0, r0, #1
 80a1eee:	4770      	bx	lr
 80a1ef0:	f102 0220 	add.w	r2, r2, #32
 80a1ef4:	fa01 fc02 	lsl.w	ip, r1, r2
 80a1ef8:	f1c2 0220 	rsb	r2, r2, #32
 80a1efc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a1f00:	fa21 f202 	lsr.w	r2, r1, r2
 80a1f04:	eb43 0002 	adc.w	r0, r3, r2
 80a1f08:	bf08      	it	eq
 80a1f0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a1f0e:	4770      	bx	lr

080a1f10 <__aeabi_fmul>:
 80a1f10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1f14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a1f18:	bf1e      	ittt	ne
 80a1f1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a1f1e:	ea92 0f0c 	teqne	r2, ip
 80a1f22:	ea93 0f0c 	teqne	r3, ip
 80a1f26:	d06f      	beq.n	80a2008 <__aeabi_fmul+0xf8>
 80a1f28:	441a      	add	r2, r3
 80a1f2a:	ea80 0c01 	eor.w	ip, r0, r1
 80a1f2e:	0240      	lsls	r0, r0, #9
 80a1f30:	bf18      	it	ne
 80a1f32:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a1f36:	d01e      	beq.n	80a1f76 <__aeabi_fmul+0x66>
 80a1f38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a1f3c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a1f40:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a1f44:	fba0 3101 	umull	r3, r1, r0, r1
 80a1f48:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a1f4c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a1f50:	bf3e      	ittt	cc
 80a1f52:	0049      	lslcc	r1, r1, #1
 80a1f54:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a1f58:	005b      	lslcc	r3, r3, #1
 80a1f5a:	ea40 0001 	orr.w	r0, r0, r1
 80a1f5e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a1f62:	2afd      	cmp	r2, #253	; 0xfd
 80a1f64:	d81d      	bhi.n	80a1fa2 <__aeabi_fmul+0x92>
 80a1f66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a1f6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a1f6e:	bf08      	it	eq
 80a1f70:	f020 0001 	biceq.w	r0, r0, #1
 80a1f74:	4770      	bx	lr
 80a1f76:	f090 0f00 	teq	r0, #0
 80a1f7a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a1f7e:	bf08      	it	eq
 80a1f80:	0249      	lsleq	r1, r1, #9
 80a1f82:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a1f86:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a1f8a:	3a7f      	subs	r2, #127	; 0x7f
 80a1f8c:	bfc2      	ittt	gt
 80a1f8e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a1f92:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a1f96:	4770      	bxgt	lr
 80a1f98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1f9c:	f04f 0300 	mov.w	r3, #0
 80a1fa0:	3a01      	subs	r2, #1
 80a1fa2:	dc5d      	bgt.n	80a2060 <__aeabi_fmul+0x150>
 80a1fa4:	f112 0f19 	cmn.w	r2, #25
 80a1fa8:	bfdc      	itt	le
 80a1faa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a1fae:	4770      	bxle	lr
 80a1fb0:	f1c2 0200 	rsb	r2, r2, #0
 80a1fb4:	0041      	lsls	r1, r0, #1
 80a1fb6:	fa21 f102 	lsr.w	r1, r1, r2
 80a1fba:	f1c2 0220 	rsb	r2, r2, #32
 80a1fbe:	fa00 fc02 	lsl.w	ip, r0, r2
 80a1fc2:	ea5f 0031 	movs.w	r0, r1, rrx
 80a1fc6:	f140 0000 	adc.w	r0, r0, #0
 80a1fca:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a1fce:	bf08      	it	eq
 80a1fd0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a1fd4:	4770      	bx	lr
 80a1fd6:	f092 0f00 	teq	r2, #0
 80a1fda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a1fde:	bf02      	ittt	eq
 80a1fe0:	0040      	lsleq	r0, r0, #1
 80a1fe2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a1fe6:	3a01      	subeq	r2, #1
 80a1fe8:	d0f9      	beq.n	80a1fde <__aeabi_fmul+0xce>
 80a1fea:	ea40 000c 	orr.w	r0, r0, ip
 80a1fee:	f093 0f00 	teq	r3, #0
 80a1ff2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a1ff6:	bf02      	ittt	eq
 80a1ff8:	0049      	lsleq	r1, r1, #1
 80a1ffa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a1ffe:	3b01      	subeq	r3, #1
 80a2000:	d0f9      	beq.n	80a1ff6 <__aeabi_fmul+0xe6>
 80a2002:	ea41 010c 	orr.w	r1, r1, ip
 80a2006:	e78f      	b.n	80a1f28 <__aeabi_fmul+0x18>
 80a2008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a200c:	ea92 0f0c 	teq	r2, ip
 80a2010:	bf18      	it	ne
 80a2012:	ea93 0f0c 	teqne	r3, ip
 80a2016:	d00a      	beq.n	80a202e <__aeabi_fmul+0x11e>
 80a2018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a201c:	bf18      	it	ne
 80a201e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2022:	d1d8      	bne.n	80a1fd6 <__aeabi_fmul+0xc6>
 80a2024:	ea80 0001 	eor.w	r0, r0, r1
 80a2028:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a202c:	4770      	bx	lr
 80a202e:	f090 0f00 	teq	r0, #0
 80a2032:	bf17      	itett	ne
 80a2034:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a2038:	4608      	moveq	r0, r1
 80a203a:	f091 0f00 	teqne	r1, #0
 80a203e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a2042:	d014      	beq.n	80a206e <__aeabi_fmul+0x15e>
 80a2044:	ea92 0f0c 	teq	r2, ip
 80a2048:	d101      	bne.n	80a204e <__aeabi_fmul+0x13e>
 80a204a:	0242      	lsls	r2, r0, #9
 80a204c:	d10f      	bne.n	80a206e <__aeabi_fmul+0x15e>
 80a204e:	ea93 0f0c 	teq	r3, ip
 80a2052:	d103      	bne.n	80a205c <__aeabi_fmul+0x14c>
 80a2054:	024b      	lsls	r3, r1, #9
 80a2056:	bf18      	it	ne
 80a2058:	4608      	movne	r0, r1
 80a205a:	d108      	bne.n	80a206e <__aeabi_fmul+0x15e>
 80a205c:	ea80 0001 	eor.w	r0, r0, r1
 80a2060:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2064:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2068:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a206c:	4770      	bx	lr
 80a206e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2072:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a2076:	4770      	bx	lr

080a2078 <__aeabi_fdiv>:
 80a2078:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a207c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2080:	bf1e      	ittt	ne
 80a2082:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2086:	ea92 0f0c 	teqne	r2, ip
 80a208a:	ea93 0f0c 	teqne	r3, ip
 80a208e:	d069      	beq.n	80a2164 <__aeabi_fdiv+0xec>
 80a2090:	eba2 0203 	sub.w	r2, r2, r3
 80a2094:	ea80 0c01 	eor.w	ip, r0, r1
 80a2098:	0249      	lsls	r1, r1, #9
 80a209a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a209e:	d037      	beq.n	80a2110 <__aeabi_fdiv+0x98>
 80a20a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a20a4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a20a8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a20ac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a20b0:	428b      	cmp	r3, r1
 80a20b2:	bf38      	it	cc
 80a20b4:	005b      	lslcc	r3, r3, #1
 80a20b6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a20ba:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a20be:	428b      	cmp	r3, r1
 80a20c0:	bf24      	itt	cs
 80a20c2:	1a5b      	subcs	r3, r3, r1
 80a20c4:	ea40 000c 	orrcs.w	r0, r0, ip
 80a20c8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a20cc:	bf24      	itt	cs
 80a20ce:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a20d2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a20d6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a20da:	bf24      	itt	cs
 80a20dc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a20e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a20e4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a20e8:	bf24      	itt	cs
 80a20ea:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a20ee:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a20f2:	011b      	lsls	r3, r3, #4
 80a20f4:	bf18      	it	ne
 80a20f6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a20fa:	d1e0      	bne.n	80a20be <__aeabi_fdiv+0x46>
 80a20fc:	2afd      	cmp	r2, #253	; 0xfd
 80a20fe:	f63f af50 	bhi.w	80a1fa2 <__aeabi_fmul+0x92>
 80a2102:	428b      	cmp	r3, r1
 80a2104:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2108:	bf08      	it	eq
 80a210a:	f020 0001 	biceq.w	r0, r0, #1
 80a210e:	4770      	bx	lr
 80a2110:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2114:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2118:	327f      	adds	r2, #127	; 0x7f
 80a211a:	bfc2      	ittt	gt
 80a211c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2120:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2124:	4770      	bxgt	lr
 80a2126:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a212a:	f04f 0300 	mov.w	r3, #0
 80a212e:	3a01      	subs	r2, #1
 80a2130:	e737      	b.n	80a1fa2 <__aeabi_fmul+0x92>
 80a2132:	f092 0f00 	teq	r2, #0
 80a2136:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a213a:	bf02      	ittt	eq
 80a213c:	0040      	lsleq	r0, r0, #1
 80a213e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a2142:	3a01      	subeq	r2, #1
 80a2144:	d0f9      	beq.n	80a213a <__aeabi_fdiv+0xc2>
 80a2146:	ea40 000c 	orr.w	r0, r0, ip
 80a214a:	f093 0f00 	teq	r3, #0
 80a214e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2152:	bf02      	ittt	eq
 80a2154:	0049      	lsleq	r1, r1, #1
 80a2156:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a215a:	3b01      	subeq	r3, #1
 80a215c:	d0f9      	beq.n	80a2152 <__aeabi_fdiv+0xda>
 80a215e:	ea41 010c 	orr.w	r1, r1, ip
 80a2162:	e795      	b.n	80a2090 <__aeabi_fdiv+0x18>
 80a2164:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2168:	ea92 0f0c 	teq	r2, ip
 80a216c:	d108      	bne.n	80a2180 <__aeabi_fdiv+0x108>
 80a216e:	0242      	lsls	r2, r0, #9
 80a2170:	f47f af7d 	bne.w	80a206e <__aeabi_fmul+0x15e>
 80a2174:	ea93 0f0c 	teq	r3, ip
 80a2178:	f47f af70 	bne.w	80a205c <__aeabi_fmul+0x14c>
 80a217c:	4608      	mov	r0, r1
 80a217e:	e776      	b.n	80a206e <__aeabi_fmul+0x15e>
 80a2180:	ea93 0f0c 	teq	r3, ip
 80a2184:	d104      	bne.n	80a2190 <__aeabi_fdiv+0x118>
 80a2186:	024b      	lsls	r3, r1, #9
 80a2188:	f43f af4c 	beq.w	80a2024 <__aeabi_fmul+0x114>
 80a218c:	4608      	mov	r0, r1
 80a218e:	e76e      	b.n	80a206e <__aeabi_fmul+0x15e>
 80a2190:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2194:	bf18      	it	ne
 80a2196:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a219a:	d1ca      	bne.n	80a2132 <__aeabi_fdiv+0xba>
 80a219c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a21a0:	f47f af5c 	bne.w	80a205c <__aeabi_fmul+0x14c>
 80a21a4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a21a8:	f47f af3c 	bne.w	80a2024 <__aeabi_fmul+0x114>
 80a21ac:	e75f      	b.n	80a206e <__aeabi_fmul+0x15e>
 80a21ae:	bf00      	nop

080a21b0 <__cxa_atexit>:
 80a21b0:	b510      	push	{r4, lr}
 80a21b2:	4c05      	ldr	r4, [pc, #20]	; (80a21c8 <__cxa_atexit+0x18>)
 80a21b4:	4613      	mov	r3, r2
 80a21b6:	b12c      	cbz	r4, 80a21c4 <__cxa_atexit+0x14>
 80a21b8:	460a      	mov	r2, r1
 80a21ba:	4601      	mov	r1, r0
 80a21bc:	2002      	movs	r0, #2
 80a21be:	f3af 8000 	nop.w
 80a21c2:	bd10      	pop	{r4, pc}
 80a21c4:	4620      	mov	r0, r4
 80a21c6:	bd10      	pop	{r4, pc}
 80a21c8:	00000000 	.word	0x00000000

080a21cc <memcpy>:
 80a21cc:	b510      	push	{r4, lr}
 80a21ce:	1e43      	subs	r3, r0, #1
 80a21d0:	440a      	add	r2, r1
 80a21d2:	4291      	cmp	r1, r2
 80a21d4:	d004      	beq.n	80a21e0 <memcpy+0x14>
 80a21d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a21da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a21de:	e7f8      	b.n	80a21d2 <memcpy+0x6>
 80a21e0:	bd10      	pop	{r4, pc}

080a21e2 <memset>:
 80a21e2:	4603      	mov	r3, r0
 80a21e4:	4402      	add	r2, r0
 80a21e6:	4293      	cmp	r3, r2
 80a21e8:	d002      	beq.n	80a21f0 <memset+0xe>
 80a21ea:	f803 1b01 	strb.w	r1, [r3], #1
 80a21ee:	e7fa      	b.n	80a21e6 <memset+0x4>
 80a21f0:	4770      	bx	lr
	...

080a21f4 <srand>:
 80a21f4:	b538      	push	{r3, r4, r5, lr}
 80a21f6:	4b12      	ldr	r3, [pc, #72]	; (80a2240 <srand+0x4c>)
 80a21f8:	4605      	mov	r5, r0
 80a21fa:	681c      	ldr	r4, [r3, #0]
 80a21fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a21fe:	b9d3      	cbnz	r3, 80a2236 <srand+0x42>
 80a2200:	2018      	movs	r0, #24
 80a2202:	f7fe fa4d 	bl	80a06a0 <malloc>
 80a2206:	f243 330e 	movw	r3, #13070	; 0x330e
 80a220a:	63a0      	str	r0, [r4, #56]	; 0x38
 80a220c:	8003      	strh	r3, [r0, #0]
 80a220e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a2212:	8043      	strh	r3, [r0, #2]
 80a2214:	f241 2334 	movw	r3, #4660	; 0x1234
 80a2218:	8083      	strh	r3, [r0, #4]
 80a221a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a221e:	80c3      	strh	r3, [r0, #6]
 80a2220:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2224:	8103      	strh	r3, [r0, #8]
 80a2226:	2305      	movs	r3, #5
 80a2228:	8143      	strh	r3, [r0, #10]
 80a222a:	230b      	movs	r3, #11
 80a222c:	8183      	strh	r3, [r0, #12]
 80a222e:	2201      	movs	r2, #1
 80a2230:	2300      	movs	r3, #0
 80a2232:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2236:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2238:	2200      	movs	r2, #0
 80a223a:	611d      	str	r5, [r3, #16]
 80a223c:	615a      	str	r2, [r3, #20]
 80a223e:	bd38      	pop	{r3, r4, r5, pc}
 80a2240:	20000064 	.word	0x20000064

080a2244 <strdup>:
 80a2244:	4b02      	ldr	r3, [pc, #8]	; (80a2250 <strdup+0xc>)
 80a2246:	4601      	mov	r1, r0
 80a2248:	6818      	ldr	r0, [r3, #0]
 80a224a:	f000 b803 	b.w	80a2254 <_strdup_r>
 80a224e:	bf00      	nop
 80a2250:	20000064 	.word	0x20000064

080a2254 <_strdup_r>:
 80a2254:	b570      	push	{r4, r5, r6, lr}
 80a2256:	4606      	mov	r6, r0
 80a2258:	4608      	mov	r0, r1
 80a225a:	460c      	mov	r4, r1
 80a225c:	f000 f80d 	bl	80a227a <strlen>
 80a2260:	1c45      	adds	r5, r0, #1
 80a2262:	4629      	mov	r1, r5
 80a2264:	4630      	mov	r0, r6
 80a2266:	f7fe fa3b 	bl	80a06e0 <_malloc_r>
 80a226a:	4606      	mov	r6, r0
 80a226c:	b118      	cbz	r0, 80a2276 <_strdup_r+0x22>
 80a226e:	462a      	mov	r2, r5
 80a2270:	4621      	mov	r1, r4
 80a2272:	f7ff ffab 	bl	80a21cc <memcpy>
 80a2276:	4630      	mov	r0, r6
 80a2278:	bd70      	pop	{r4, r5, r6, pc}

080a227a <strlen>:
 80a227a:	4603      	mov	r3, r0
 80a227c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2280:	2a00      	cmp	r2, #0
 80a2282:	d1fb      	bne.n	80a227c <strlen+0x2>
 80a2284:	1a18      	subs	r0, r3, r0
 80a2286:	3801      	subs	r0, #1
 80a2288:	4770      	bx	lr

080a228a <link_code_end>:
	...

080a228c <dynalib_user>:
 80a228c:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a229c:	0000 0000 7250 7365 2073 6e61 2079 656b     ....Press any ke
 80a22ac:	2079 6f74 7320 6174 7472 002e 6625 4100     y to start..%f.A
 80a22bc:	3655 3536 3830 5f31 6964 7473 6e61 6563     U665081_distance
 80a22cc:	6200 7561 0064 6553 6972 6c61 5500 4253     .baud.Serial.USB
 80a22dc:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
 80a22ec:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
 80a22fc:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
 80a230c:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
 80a231c:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
 80a232c:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
 80a233c:	6e61 6c64 7265 6100 7070 2500 3130 7530     andler.app.%010u
 80a234c:	0020 205d 2500 0064 202c 2800 3a29 0020      .] .%d., .(): .
 80a235c:	5b20 6300 646f 2065 203d 2500 0069 6564      [.code = .%i.de
 80a236c:	6174 6c69 2073 203d 0d00 000a 6e6c 6600     tails = ....ln.f
 80a237c:	006e 6f63 6564 6400 7465 6961 006c 6f6e     n.code.detail.no
 80a238c:	656e 7400 6172 6563 6900 666e 006f 6177     ne.trace.info.wa
 80a239c:	6e72 6500 7272 726f 7000 6e61 6369 6100     rn.error.panic.a
 80a23ac:	6c6c 5a00 2500 302b 6433 253a 3230 0075     ll.Z.%+03d:%02u.
 80a23bc:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
 80a23cc:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

080a23d8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a23e0:	0a29 080a 0a2f 080a 0a73 080a 0a3d 080a     ).../...s...=...
 80a23f0:	0a2b 080a                                   +...

080a23f4 <_ZTV9IPAddress>:
	...
 80a23fc:	0fc1 080a 0fb1 080a 0fb3 080a               ............

080a2408 <_ZTV9USBSerial>:
	...
 80a2410:	107d 080a 10cd 080a 10db 080a 0769 080a     }...........i...
 80a2420:	10b9 080a 107f 080a 1095 080a 10c7 080a     ................
 80a2430:	10ab 080a 1079 080a                         ....y...

080a2438 <_ZTV11USARTSerial>:
	...
 80a2440:	121d 080a 126d 080a 127b 080a 0769 080a     ....m...{...i...
 80a2450:	1231 080a 1253 080a 123f 080a 1267 080a     1...S...?...g...
 80a2460:	121f 080a 1223 080a                         ....#...

080a2468 <_ZTV7TwoWire>:
	...
 80a2470:	1349 080a 1393 080a 136b 080a 134b 080a     I.......k...K...
 80a2480:	1373 080a 137b 080a 1383 080a 138b 080a     s...{...........

080a2490 <_ZTVN5spark9WiFiClassE>:
	...
 80a2498:	1463 080a 1459 080a 144f 080a 13cd 080a     c...Y...O.......
 80a24a8:	0825 080a 1443 080a 1437 080a 142f 080a     %...C...7.../...
 80a24b8:	1425 080a 141b 080a 13d7 080a               %...........

080a24c4 <_ZTVN5spark12NetworkClassE>:
	...
 80a24cc:	1481 080a 148b 080a 1495 080a 149f 080a     ................
 80a24dc:	14a9 080a 14b5 080a 14c1 080a 14cd 080a     ................
 80a24ec:	14d5 080a 14df 080a 14e9 080a               ............

080a24f8 <_ZSt7nothrow>:
 80a24f8:	0000 0000                                   ....

080a24fc <__sf_fake_stdin>:
	...

080a251c <__sf_fake_stdout>:
	...

080a253c <__sf_fake_stderr>:
	...
 80a255c:	0043                                        C.

080a255e <link_const_variable_data_end>:
	...

080a2560 <link_constructors_location>:
 80a2560:	080a0201 	.word	0x080a0201
 80a2564:	080a0315 	.word	0x080a0315
 80a2568:	080a0735 	.word	0x080a0735
 80a256c:	080a086d 	.word	0x080a086d
 80a2570:	080a087d 	.word	0x080a087d
 80a2574:	080a08d5 	.word	0x080a08d5
 80a2578:	080a146d 	.word	0x080a146d
 80a257c:	080a1539 	.word	0x080a1539
 80a2580:	080a15fd 	.word	0x080a15fd
 80a2584:	080a16f5 	.word	0x080a16f5
 80a2588:	080a1779 	.word	0x080a1779
 80a258c:	080a183d 	.word	0x080a183d
 80a2590:	080a1901 	.word	0x080a1901

080a2594 <link_constructors_end>:
	...
